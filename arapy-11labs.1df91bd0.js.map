{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-9136b4791ff6f11e.js","arapy-11labs.4fe40fa1.js","<anon>","index.js","node_modules/@11labs/client/dist/lib.module.js","node_modules/@11labs/client/src/utils/audio.ts","node_modules/@11labs/client/src/utils/rawAudioProcessor.ts","node_modules/@11labs/client/src/utils/compatibility.ts","node_modules/@11labs/client/src/utils/input.ts","node_modules/@11labs/client/src/utils/audioConcatProcessor.ts","node_modules/@11labs/client/src/utils/output.ts","node_modules/@11labs/client/src/utils/events.ts","node_modules/@11labs/client/src/utils/connection.ts","node_modules/@11labs/client/src/index.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"e4fc2bc01df91bd0\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}",null,"// Importa o Conversation do pacote @11labs/client\nfunction $ee5c819c8591c8f0$var$e() {\n    return $ee5c819c8591c8f0$var$e = Object.assign ? Object.assign.bind() : function(e) {\n        for(var n = 1; n < arguments.length; n++){\n            var t = arguments[n];\n            for(var o in t)({}).hasOwnProperty.call(t, o) && (e[o] = t[o]);\n        }\n        return e;\n    }, $ee5c819c8591c8f0$var$e.apply(null, arguments);\n}\nfunction $ee5c819c8591c8f0$var$n(e) {\n    for(var n = window.atob(e), t = n.length, o = new Uint8Array(t), r = 0; r < t; r++)o[r] = n.charCodeAt(r);\n    return o.buffer;\n}\nvar $ee5c819c8591c8f0$var$t = new Blob([\n    '\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$o = URL.createObjectURL($ee5c819c8591c8f0$var$t);\nfunction $ee5c819c8591c8f0$var$r() {\n    return [\n        \"iPad Simulator\",\n        \"iPhone Simulator\",\n        \"iPod Simulator\",\n        \"iPad\",\n        \"iPhone\",\n        \"iPod\"\n    ].includes(navigator.platform) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nvar $ee5c819c8591c8f0$var$i = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e, this.analyser = n, this.worklet = t, this.inputStream = o;\n    }\n    e.create = function(n) {\n        var t = n.sampleRate, i = n.format, a = n.preferHeadphonesForIosDevices;\n        try {\n            var s = null, u = null;\n            return Promise.resolve(function(n, c) {\n                try {\n                    var l = function() {\n                        function n() {\n                            function n() {\n                                return Promise.resolve(s.audioWorklet.addModule($ee5c819c8591c8f0$var$o)).then(function() {\n                                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                                        audio: c\n                                    })).then(function(n) {\n                                        var o = s.createMediaStreamSource(u = n), r = new AudioWorkletNode(s, \"raw-audio-processor\");\n                                        return r.port.postMessage({\n                                            type: \"setFormat\",\n                                            format: i,\n                                            sampleRate: t\n                                        }), o.connect(a), a.connect(r), Promise.resolve(s.resume()).then(function() {\n                                            return new e(s, a, r, u);\n                                        });\n                                    });\n                                });\n                            }\n                            var r = navigator.mediaDevices.getSupportedConstraints().sampleRate, a = (s = new window.AudioContext(r ? {\n                                sampleRate: t\n                            } : {})).createAnalyser(), l = function() {\n                                if (!r) return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function() {});\n                            }();\n                            return l && l.then ? l.then(n) : n();\n                        }\n                        var c = {\n                            sampleRate: {\n                                ideal: t\n                            },\n                            echoCancellation: {\n                                ideal: !0\n                            },\n                            noiseSuppression: {\n                                ideal: !0\n                            }\n                        }, l = function() {\n                            if ($ee5c819c8591c8f0$var$r() && a) return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e) {\n                                var n = e.find(function(e) {\n                                    return \"audioinput\" === e.kind && [\n                                        \"airpod\",\n                                        \"headphone\",\n                                        \"earphone\"\n                                    ].find(function(n) {\n                                        return e.label.toLowerCase().includes(n);\n                                    });\n                                });\n                                n && (c.deviceId = {\n                                    ideal: n.deviceId\n                                });\n                            });\n                        }();\n                        return l && l.then ? l.then(n) : n();\n                    }();\n                } catch (e) {\n                    return c(e);\n                }\n                return l && l.then ? l.then(void 0, c) : l;\n            }(0, function(e) {\n                var n, t;\n                throw null == (n = u) || n.getTracks().forEach(function(e) {\n                    return e.stop();\n                }), null == (t = s) || t.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        try {\n            return this.inputStream.getTracks().forEach(function(e) {\n                return e.stop();\n            }), Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, n.setMuted = function(e) {\n        this.worklet.port.postMessage({\n            type: \"setMuted\",\n            isMuted: e\n        });\n    }, e;\n}(), $ee5c819c8591c8f0$var$a = new Blob([\n    '\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$s = URL.createObjectURL($ee5c819c8591c8f0$var$a), $ee5c819c8591c8f0$var$u = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e, this.analyser = n, this.gain = t, this.worklet = o;\n    }\n    return e.create = function(n) {\n        var t = n.sampleRate, o = n.format;\n        try {\n            var r = null;\n            return Promise.resolve(function(n, i) {\n                try {\n                    var a = (u = (r = new AudioContext({\n                        sampleRate: t\n                    })).createAnalyser(), (c = r.createGain()).connect(u), u.connect(r.destination), Promise.resolve(r.audioWorklet.addModule($ee5c819c8591c8f0$var$s)).then(function() {\n                        var n = new AudioWorkletNode(r, \"audio-concat-processor\");\n                        return n.port.postMessage({\n                            type: \"setFormat\",\n                            format: o\n                        }), n.connect(c), Promise.resolve(r.resume()).then(function() {\n                            return new e(r, u, c, n);\n                        });\n                    }));\n                } catch (e) {\n                    return i(e);\n                }\n                var u, c;\n                return a && a.then ? a.then(void 0, i) : a;\n            }(0, function(e) {\n                var n;\n                throw null == (n = r) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        try {\n            return Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$c(e) {\n    return !!e.type;\n}\nvar $ee5c819c8591c8f0$var$l = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        var r = this;\n        this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e, this.conversationId = n, this.inputFormat = t, this.outputFormat = o, this.socket.addEventListener(\"error\", function(e) {\n            setTimeout(function() {\n                return r.disconnect({\n                    reason: \"error\",\n                    message: \"The connection was closed due to a socket error.\",\n                    context: e\n                });\n            }, 0);\n        }), this.socket.addEventListener(\"close\", function(e) {\n            r.disconnect(1e3 === e.code ? {\n                reason: \"agent\",\n                context: e\n            } : {\n                reason: \"error\",\n                message: e.reason || \"The connection was closed by the server.\",\n                context: e\n            });\n        }), this.socket.addEventListener(\"message\", function(e) {\n            try {\n                var n = JSON.parse(e.data);\n                if (!$ee5c819c8591c8f0$var$c(n)) return;\n                r.onMessageCallback ? r.onMessageCallback(n) : r.queue.push(n);\n            } catch (e) {}\n        });\n    }\n    e.create = function(n) {\n        try {\n            var t = null;\n            return Promise.resolve(function(o, r) {\n                try {\n                    var i = (s = null != (a = n.origin) ? a : \"wss://api.elevenlabs.io\", u = n.signedUrl ? n.signedUrl : s + \"/v1/convai/conversation?agent_id=\" + n.agentId, l = [\n                        \"convai\"\n                    ], n.authorization && l.push(\"bearer.\" + n.authorization), t = new WebSocket(u, l), Promise.resolve(new Promise(function(e, o) {\n                        t.addEventListener(\"open\", function() {\n                            var e, o, r, i, a, s = {\n                                type: \"conversation_initiation_client_data\"\n                            };\n                            n.overrides && (s.conversation_config_override = {\n                                agent: {\n                                    prompt: null == (o = n.overrides.agent) ? void 0 : o.prompt,\n                                    first_message: null == (r = n.overrides.agent) ? void 0 : r.firstMessage,\n                                    language: null == (i = n.overrides.agent) ? void 0 : i.language\n                                },\n                                tts: {\n                                    voice_id: null == (a = n.overrides.tts) ? void 0 : a.voiceId\n                                }\n                            }), n.customLlmExtraBody && (s.custom_llm_extra_body = n.customLlmExtraBody), n.dynamicVariables && (s.dynamic_variables = n.dynamicVariables), null == (e = t) || e.send(JSON.stringify(s));\n                        }, {\n                            once: !0\n                        }), t.addEventListener(\"error\", function(e) {\n                            setTimeout(function() {\n                                return o(e);\n                            }, 0);\n                        }), t.addEventListener(\"close\", o), t.addEventListener(\"message\", function(n) {\n                            var t = JSON.parse(n.data);\n                            $ee5c819c8591c8f0$var$c(t) && (\"conversation_initiation_metadata\" === t.type ? e(t.conversation_initiation_metadata_event) : console.warn(\"First received message is not conversation metadata.\"));\n                        }, {\n                            once: !0\n                        });\n                    })).then(function(n) {\n                        var o = n.conversation_id, r = n.agent_output_audio_format, i = n.user_input_audio_format, a = $ee5c819c8591c8f0$var$d(null != i ? i : \"pcm_16000\"), s = $ee5c819c8591c8f0$var$d(r);\n                        return new e(t, o, a, s);\n                    }));\n                } catch (e) {\n                    return r(e);\n                }\n                var a, s, u, l;\n                return i && i.then ? i.then(void 0, r) : i;\n            }(0, function(e) {\n                var n;\n                throw null == (n = t) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        this.socket.close();\n    }, n.sendMessage = function(e) {\n        this.socket.send(JSON.stringify(e));\n    }, n.onMessage = function(e) {\n        this.onMessageCallback = e, this.queue.forEach(e), this.queue = [];\n    }, n.onDisconnect = function(e) {\n        this.onDisconnectCallback = e, this.disconnectionDetails && e(this.disconnectionDetails);\n    }, n.disconnect = function(e) {\n        var n;\n        this.disconnectionDetails || (this.disconnectionDetails = e, null == (n = this.onDisconnectCallback) || n.call(this, e));\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$d(e) {\n    var n = e.split(\"_\"), t = n[0], o = n[1];\n    if (![\n        \"pcm\",\n        \"ulaw\"\n    ].includes(t)) throw new Error(\"Invalid format: \" + e);\n    var r = parseInt(o);\n    if (isNaN(r)) throw new Error(\"Invalid sample rate: \" + o);\n    return {\n        format: t,\n        sampleRate: r\n    };\n}\nfunction $ee5c819c8591c8f0$var$h(e, n) {\n    try {\n        var t = e();\n    } catch (e) {\n        return n(e);\n    }\n    return t && t.then ? t.then(void 0, n) : t;\n}\nvar $ee5c819c8591c8f0$var$p = {\n    clientTools: {}\n}, $ee5c819c8591c8f0$var$f = {\n    onConnect: function() {},\n    onDebug: function() {},\n    onDisconnect: function() {},\n    onError: function() {},\n    onMessage: function() {},\n    onAudio: function() {},\n    onModeChange: function() {},\n    onStatusChange: function() {},\n    onCanSendFeedbackChange: function() {}\n}, $ee5c819c8591c8f0$export$8e86b22308382a1 = /*#__PURE__*/ function() {\n    function t(e, t, o, r, i) {\n        var a = this, s = this, u = this;\n        this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.wakeLock = void 0, this.lastInterruptTimestamp = 0, this.mode = \"listening\", this.status = \"connecting\", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = !1, this.endSession = function() {\n            return u.endSessionWithDetails({\n                reason: \"user\"\n            });\n        }, this.endSessionWithDetails = function(e) {\n            try {\n                var n = function() {\n                    return a.connection.close(), Promise.resolve(a.input.close()).then(function() {\n                        return Promise.resolve(a.output.close()).then(function() {\n                            a.updateStatus(\"disconnected\"), a.options.onDisconnect(e);\n                        });\n                    });\n                };\n                if (\"connected\" !== a.status && \"connecting\" !== a.status) return Promise.resolve();\n                a.updateStatus(\"disconnecting\");\n                var t = $ee5c819c8591c8f0$var$h(function() {\n                    var e;\n                    return Promise.resolve(null == (e = a.wakeLock) ? void 0 : e.release()).then(function() {\n                        a.wakeLock = null;\n                    });\n                }, function() {});\n                return Promise.resolve(t && t.then ? t.then(n) : n());\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.updateMode = function(e) {\n            e !== u.mode && (u.mode = e, u.options.onModeChange({\n                mode: e\n            }));\n        }, this.updateStatus = function(e) {\n            e !== u.status && (u.status = e, u.options.onStatusChange({\n                status: e\n            }));\n        }, this.updateCanSendFeedback = function() {\n            var e = u.currentEventId !== u.lastFeedbackEventId;\n            u.canSendFeedback !== e && (u.canSendFeedback = e, u.options.onCanSendFeedbackChange({\n                canSendFeedback: e\n            }));\n        }, this.onMessage = function(e) {\n            try {\n                switch(e.type){\n                    case \"interruption\":\n                        return e.interruption_event && (s.lastInterruptTimestamp = e.interruption_event.event_id), s.fadeOutAudio(), Promise.resolve();\n                    case \"agent_response\":\n                        return s.options.onMessage({\n                            source: \"ai\",\n                            message: e.agent_response_event.agent_response\n                        }), Promise.resolve();\n                    case \"user_transcript\":\n                        return s.options.onMessage({\n                            source: \"user\",\n                            message: e.user_transcription_event.user_transcript\n                        }), Promise.resolve();\n                    case \"internal_tentative_agent_response\":\n                        return s.options.onDebug({\n                            type: \"tentative_agent_response\",\n                            response: e.tentative_agent_response_internal_event.tentative_agent_response\n                        }), Promise.resolve();\n                    case \"client_tool_call\":\n                        return Promise.resolve(function() {\n                            if (s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)) {\n                                var n = $ee5c819c8591c8f0$var$h(function() {\n                                    return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n) {\n                                        var t = \"object\" == typeof n ? JSON.stringify(n) : String(n);\n                                        s.connection.sendMessage({\n                                            type: \"client_tool_result\",\n                                            tool_call_id: e.client_tool_call.tool_call_id,\n                                            result: t,\n                                            is_error: !1\n                                        });\n                                    });\n                                }, function(n) {\n                                    s.onError(\"Client tool execution failed with following error: \" + (null == n ? void 0 : n.message), {\n                                        clientToolName: e.client_tool_call.tool_name\n                                    }), s.connection.sendMessage({\n                                        type: \"client_tool_result\",\n                                        tool_call_id: e.client_tool_call.tool_call_id,\n                                        result: \"Client tool execution failed: \" + (null == n ? void 0 : n.message),\n                                        is_error: !0\n                                    });\n                                });\n                                if (n && n.then) return n.then(function() {});\n                            } else {\n                                if (s.options.onUnhandledClientToolCall) return void s.options.onUnhandledClientToolCall(e.client_tool_call);\n                                s.onError(\"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\", {\n                                    clientToolName: e.client_tool_call.tool_name\n                                }), s.connection.sendMessage({\n                                    type: \"client_tool_result\",\n                                    tool_call_id: e.client_tool_call.tool_call_id,\n                                    result: \"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\",\n                                    is_error: !0\n                                });\n                            }\n                        }());\n                    case \"audio\":\n                        return s.lastInterruptTimestamp <= e.audio_event.event_id && (s.options.onAudio(e.audio_event.audio_base_64), s.addAudioBase64Chunk(e.audio_event.audio_base_64), s.currentEventId = e.audio_event.event_id, s.updateCanSendFeedback(), s.updateMode(\"speaking\")), Promise.resolve();\n                    case \"ping\":\n                        return s.connection.sendMessage({\n                            type: \"pong\",\n                            event_id: e.ping_event.event_id\n                        }), Promise.resolve();\n                    default:\n                        return s.options.onDebug(e), Promise.resolve();\n                }\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.onInputWorkletMessage = function(e) {\n            var n, t;\n            \"connected\" === u.status && u.connection.sendMessage({\n                user_audio_chunk: (n = e.data[0].buffer, t = new Uint8Array(n), window.btoa(String.fromCharCode.apply(String, t)))\n            });\n        }, this.onOutputWorkletMessage = function(e) {\n            var n = e.data;\n            \"process\" === n.type && u.updateMode(n.finished ? \"listening\" : \"speaking\");\n        }, this.addAudioBase64Chunk = function(e) {\n            u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                type: \"clearInterrupted\"\n            }), u.output.worklet.port.postMessage({\n                type: \"buffer\",\n                buffer: $ee5c819c8591c8f0$var$n(e)\n            });\n        }, this.fadeOutAudio = function() {\n            u.updateMode(\"listening\"), u.output.worklet.port.postMessage({\n                type: \"interrupt\"\n            }), u.output.gain.gain.exponentialRampToValueAtTime(1e-4, u.output.context.currentTime + 2), setTimeout(function() {\n                u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                    type: \"clearInterrupted\"\n                });\n            }, 2e3);\n        }, this.onError = function(e, n) {\n            console.error(e, n), u.options.onError(e, n);\n        }, this.calculateVolume = function(e) {\n            if (0 === e.length) return 0;\n            for(var n = 0, t = 0; t < e.length; t++)n += e[t] / 255;\n            return (n /= e.length) < 0 ? 0 : n > 1 ? 1 : n;\n        }, this.getId = function() {\n            return u.connection.conversationId;\n        }, this.isOpen = function() {\n            return \"connected\" === u.status;\n        }, this.setVolume = function(e) {\n            u.volume = e.volume;\n        }, this.setMicMuted = function(e) {\n            u.input.setMuted(e);\n        }, this.getInputByteFrequencyData = function() {\n            return null != u.inputFrequencyData || (u.inputFrequencyData = new Uint8Array(u.input.analyser.frequencyBinCount)), u.input.analyser.getByteFrequencyData(u.inputFrequencyData), u.inputFrequencyData;\n        }, this.getOutputByteFrequencyData = function() {\n            return null != u.outputFrequencyData || (u.outputFrequencyData = new Uint8Array(u.output.analyser.frequencyBinCount)), u.output.analyser.getByteFrequencyData(u.outputFrequencyData), u.outputFrequencyData;\n        }, this.getInputVolume = function() {\n            return u.calculateVolume(u.getInputByteFrequencyData());\n        }, this.getOutputVolume = function() {\n            return u.calculateVolume(u.getOutputByteFrequencyData());\n        }, this.sendFeedback = function(e) {\n            u.canSendFeedback ? (u.connection.sendMessage({\n                type: \"feedback\",\n                score: e ? \"like\" : \"dislike\",\n                event_id: u.currentEventId\n            }), u.lastFeedbackEventId = u.currentEventId, u.updateCanSendFeedback()) : console.warn(0 === u.lastFeedbackEventId ? \"Cannot send feedback: the conversation has not started yet.\" : \"Cannot send feedback: feedback has already been sent for the current response.\");\n        }, this.sendContextualUpdate = function(e) {\n            u.connection.sendMessage({\n                type: \"contextual_update\",\n                text: e\n            });\n        }, this.options = e, this.connection = t, this.input = o, this.output = r, this.wakeLock = i, this.options.onConnect({\n            conversationId: t.conversationId\n        }), this.connection.onDisconnect(this.endSessionWithDetails), this.connection.onMessage(this.onMessage), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus(\"connected\");\n    }\n    return t.startSession = function(n) {\n        try {\n            var o = function() {\n                return $ee5c819c8591c8f0$var$h(function() {\n                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                        audio: !0\n                    })).then(function(o) {\n                        var h;\n                        function p() {\n                            return Promise.resolve($ee5c819c8591c8f0$var$l.create(n)).then(function(o) {\n                                return c = o, Promise.resolve(Promise.all([\n                                    $ee5c819c8591c8f0$var$i.create($ee5c819c8591c8f0$var$e({}, c.inputFormat, {\n                                        preferHeadphonesForIosDevices: n.preferHeadphonesForIosDevices\n                                    })),\n                                    $ee5c819c8591c8f0$var$u.create(c.outputFormat)\n                                ])).then(function(e) {\n                                    var n;\n                                    return s = e[0], d = e[1], null == (n = m) || n.getTracks().forEach(function(e) {\n                                        return e.stop();\n                                    }), m = null, new t(a, c, s, d, v);\n                                });\n                            });\n                        }\n                        m = o;\n                        var f, g = null != (h = n.connectionDelay) ? h : {\n                            default: 0,\n                            android: 3e3\n                        }, y = g.default;\n                        if (/android/i.test(navigator.userAgent)) y = null != (f = g.android) ? f : y;\n                        else if ($ee5c819c8591c8f0$var$r()) {\n                            var _;\n                            y = null != (_ = g.ios) ? _ : y;\n                        }\n                        var b = function() {\n                            if (y > 0) return Promise.resolve(new Promise(function(e) {\n                                return setTimeout(e, y);\n                            })).then(function() {});\n                        }();\n                        return b && b.then ? b.then(p) : p();\n                    });\n                }, function(e) {\n                    var n, t, o;\n                    return a.onStatusChange({\n                        status: \"disconnected\"\n                    }), null == (n = m) || n.getTracks().forEach(function(e) {\n                        return e.stop();\n                    }), null == (t = c) || t.close(), Promise.resolve(null == (o = s) ? void 0 : o.close()).then(function() {\n                        var n;\n                        return Promise.resolve(null == (n = d) ? void 0 : n.close()).then(function() {\n                            function n() {\n                                throw e;\n                            }\n                            var t = $ee5c819c8591c8f0$var$h(function() {\n                                var e;\n                                return Promise.resolve(null == (e = v) ? void 0 : e.release()).then(function() {\n                                    v = null;\n                                });\n                            }, function() {});\n                            return t && t.then ? t.then(n) : n();\n                        });\n                    });\n                });\n            }, a = $ee5c819c8591c8f0$var$e({}, $ee5c819c8591c8f0$var$p, $ee5c819c8591c8f0$var$f, n);\n            a.onStatusChange({\n                status: \"connecting\"\n            }), a.onCanSendFeedbackChange({\n                canSendFeedback: !1\n            });\n            var s = null, c = null, d = null, m = null, v = null, g = function(e) {\n                if (null == (e = n.useWakeLock) || e) {\n                    var t = $ee5c819c8591c8f0$var$h(function() {\n                        return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e) {\n                            v = e;\n                        });\n                    }, function() {});\n                    if (t && t.then) return t.then(function() {});\n                }\n            }();\n            return Promise.resolve(g && g.then ? g.then(o) : o());\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, t;\n}();\nfunction $ee5c819c8591c8f0$export$d6afbf68dbf63e6a(e, n, t) {\n    return void 0 === t && (t = \"https://api.elevenlabs.io\"), fetch(t + \"/v1/convai/conversations/\" + e + \"/feedback\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            feedback: n ? \"like\" : \"dislike\"\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\n\nconst $dad545c909cfec2d$var$startBtn = document.getElementById('startBtn');\nconst $dad545c909cfec2d$var$stopBtn = document.getElementById('stopBtn');\nconst $dad545c909cfec2d$var$statusEl = document.getElementById('status');\nlet $dad545c909cfec2d$var$conversationInstance = null;\nlet $dad545c909cfec2d$var$audio = null;\n// on page load: check for name and id parameters in url, then set the <span id=name> object\nconst $dad545c909cfec2d$var$urlParams = new URLSearchParams(window.location.search);\nlet $dad545c909cfec2d$var$config = {\n    name: $dad545c909cfec2d$var$urlParams.get('name'),\n    agentId: $dad545c909cfec2d$var$urlParams.get('id')\n};\n//try to load  a {name}.json from the server overwriting the whole config object\nconst $dad545c909cfec2d$var$loadConfig = async ()=>{\n    if (!$dad545c909cfec2d$var$config.agentId) try {\n        const response = await fetch(`agents/${$dad545c909cfec2d$var$config.name}.json`);\n        const data = await response.json();\n        $dad545c909cfec2d$var$config = data;\n        console.log('Config loaded:', $dad545c909cfec2d$var$config);\n    } catch (error) {\n        console.error('Error loading config:', error);\n    }\n    document.getElementById('name').textContent = $dad545c909cfec2d$var$config.name;\n    if (!$dad545c909cfec2d$var$config.agentId) {\n        const startBtn = document.getElementById('startBtn');\n        startBtn.disabled = true;\n        startBtn.innerText = \"Agente n\\xe3o encontrado!\";\n    }\n};\n$dad545c909cfec2d$var$loadConfig();\n// Função para atualizar o status na interface\nconst $dad545c909cfec2d$var$updateStatus = (status)=>{\n    $dad545c909cfec2d$var$statusEl.textContent = \"Status: \" + status;\n};\n// Função para iniciar a conversa\nasync function $dad545c909cfec2d$var$startConversation() {\n    try {\n        // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n        await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        $dad545c909cfec2d$var$updateStatus('Microfone liberado');\n        //Play an mp3 file and wait for it to finish\n        if ($dad545c909cfec2d$var$config.startAudio) {\n            $dad545c909cfec2d$var$startBtn.classList.add('hidden');\n            $dad545c909cfec2d$var$stopBtn.classList.remove('hidden');\n            $dad545c909cfec2d$var$audio = new Audio($dad545c909cfec2d$var$config.startAudio);\n            $dad545c909cfec2d$var$audio.play();\n            $dad545c909cfec2d$var$updateStatus(\"Reproduzindo \\xe1udio de boas-vindas\");\n            await new Promise((resolve)=>{\n                $dad545c909cfec2d$var$audio.onended = resolve;\n            });\n        }\n        // Inicia a sessão de conversa com o agente\n        //Parse o ID do agente a partir da URL, parametro id\n        $dad545c909cfec2d$var$conversationInstance = await (0, $ee5c819c8591c8f0$export$8e86b22308382a1).startSession({\n            agentId: $dad545c909cfec2d$var$config.agentId,\n            // Callbacks opcionais:\n            onConnect: ()=>{\n                console.log('Conectado ao agente!');\n                $dad545c909cfec2d$var$updateStatus('Conectado');\n            },\n            onDisconnect: ()=>{\n                console.log(\"Conex\\xe3o encerrada.\");\n                $dad545c909cfec2d$var$updateStatus('Desconectado');\n            },\n            onMessage: (message)=>{\n                console.log('Mensagem recebida:', message);\n            // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n            },\n            onError: (error)=>{\n                console.error(\"Erro na sess\\xe3o:\", error);\n                $dad545c909cfec2d$var$updateStatus('Erro');\n            },\n            onStatusChange: (status)=>{\n                console.log('Status alterado:', status);\n            },\n            onModeChange: (mode)=>{\n                console.log('Modo alterado:', mode);\n            }\n        });\n    } catch (error) {\n        console.error('Erro ao iniciar a conversa:', error);\n        $dad545c909cfec2d$var$updateStatus('Erro ao iniciar');\n    }\n}\n// Função para encerrar a conversa\nasync function $dad545c909cfec2d$var$endConversation() {\n    if ($dad545c909cfec2d$var$audio) {\n        $dad545c909cfec2d$var$audio.pause();\n        $dad545c909cfec2d$var$audio = null;\n    }\n    if ($dad545c909cfec2d$var$conversationInstance) {\n        await $dad545c909cfec2d$var$conversationInstance.endSession();\n        $dad545c909cfec2d$var$conversationInstance = null;\n    }\n    $dad545c909cfec2d$var$updateStatus('Desconectado');\n    $dad545c909cfec2d$var$startBtn.classList.remove('hidden');\n    $dad545c909cfec2d$var$stopBtn.classList.add('hidden');\n}\n// Eventos dos botões\n$dad545c909cfec2d$var$startBtn.addEventListener('click', $dad545c909cfec2d$var$startConversation);\n$dad545c909cfec2d$var$stopBtn.addEventListener('click', $dad545c909cfec2d$var$endConversation);\n\n\n//# sourceMappingURL=arapy-11labs.4fe40fa1.js.map\n"," // Importa o Conversation do pacote @11labs/client\n import { Conversation } from '@11labs/client';\n\n const startBtn = document.getElementById('startBtn');\n const stopBtn = document.getElementById('stopBtn');\n const statusEl = document.getElementById('status');\n let conversationInstance = null;\n let audio = null;\n\n// on page load: check for name and id parameters in url, then set the <span id=name> object\n\n\nconst urlParams = new URLSearchParams(window.location.search);\nlet config = {\n    name: urlParams.get('name'),\n    agentId: urlParams.get('id'),\n}\n\n//try to load  a {name}.json from the server overwriting the whole config object\nconst loadConfig = async () => {\n  if (!config.agentId) {\n      try {\n          const response = await fetch(`agents/${config.name}.json`);\n          const data = await response.json();\n          config = data;\n          console.log('Config loaded:', config);\n      } catch (error) {\n          console.error('Error loading config:', error);\n      }\n  }\n\n  document.getElementById('name').textContent = config.name;\n\n  if (!config.agentId) {\n      const startBtn = document.getElementById('startBtn');\n      startBtn.disabled = true;\n      startBtn.innerText = \"Agente não encontrado!\";\n  }\n};\n\nloadConfig();\n\n // Função para atualizar o status na interface\n const updateStatus = (status) => {\n   statusEl.textContent = \"Status: \" + status;\n };\n\n // Função para iniciar a conversa\n async function startConversation() {\n   try {\n     // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n     await navigator.mediaDevices.getUserMedia({ audio: true });\n     updateStatus('Microfone liberado');\n\n    //Play an mp3 file and wait for it to finish\n      if (config.startAudio) {\n\n       startBtn.classList.add('hidden');\n       stopBtn.classList.remove('hidden');\n\n        audio = new Audio(config.startAudio);\n        audio.play();\n        updateStatus('Reproduzindo áudio de boas-vindas');\n        await new Promise((resolve) => {\n          audio.onended = resolve;\n        });  \n      }\n      \n     // Inicia a sessão de conversa com o agente\n     //Parse o ID do agente a partir da URL, parametro id\n     conversationInstance = await Conversation.startSession({\n       agentId: config.agentId,\n       // Callbacks opcionais:\n       onConnect: () => {\n         console.log('Conectado ao agente!');\n         updateStatus('Conectado');\n       },\n       onDisconnect: () => {\n         console.log('Conexão encerrada.');\n         updateStatus('Desconectado');\n       },\n       onMessage: (message) => {\n         console.log('Mensagem recebida:', message);\n         // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n       },\n       onError: (error) => {\n         console.error('Erro na sessão:', error);\n         updateStatus('Erro');\n       },\n       onStatusChange: (status) => {\n         console.log('Status alterado:', status);\n       },\n       onModeChange: (mode) => {\n         console.log('Modo alterado:', mode);\n       },\n     });\n\n   } catch (error) {\n     console.error('Erro ao iniciar a conversa:', error);\n     updateStatus('Erro ao iniciar');\n   }\n }\n\n // Função para encerrar a conversa\n async function endConversation() {\n   if (audio) {\n      audio.pause();\n      audio = null;\n   }\n   if (conversationInstance) {\n     await conversationInstance.endSession();\n     conversationInstance = null;\n   }\n   updateStatus('Desconectado');\n   startBtn.classList.remove('hidden');\n   stopBtn.classList.add('hidden');\n }\n\n // Eventos dos botões\n startBtn.addEventListener('click', startConversation);\n stopBtn.addEventListener('click', endConversation);","function e(){return e=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)({}).hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},e.apply(null,arguments)}function n(e){for(var n=window.atob(e),t=n.length,o=new Uint8Array(t),r=0;r<t;r++)o[r]=n.charCodeAt(r);return o.buffer}var t=new Blob(['\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '],{type:\"application/javascript\"}),o=URL.createObjectURL(t);function r(){return[\"iPad Simulator\",\"iPhone Simulator\",\"iPod Simulator\",\"iPad\",\"iPhone\",\"iPod\"].includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"ontouchend\"in document}var i=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=n,this.worklet=t,this.inputStream=o}e.create=function(n){var t=n.sampleRate,i=n.format,a=n.preferHeadphonesForIosDevices;try{var s=null,u=null;return Promise.resolve(function(n,c){try{var l=function(){function n(){function n(){return Promise.resolve(s.audioWorklet.addModule(o)).then(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:c})).then(function(n){var o=s.createMediaStreamSource(u=n),r=new AudioWorkletNode(s,\"raw-audio-processor\");return r.port.postMessage({type:\"setFormat\",format:i,sampleRate:t}),o.connect(a),a.connect(r),Promise.resolve(s.resume()).then(function(){return new e(s,a,r,u)})})})}var r=navigator.mediaDevices.getSupportedConstraints().sampleRate,a=(s=new window.AudioContext(r?{sampleRate:t}:{})).createAnalyser(),l=function(){if(!r)return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function(){})}();return l&&l.then?l.then(n):n()}var c={sampleRate:{ideal:t},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}},l=function(){if(r()&&a)return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e){var n=e.find(function(e){return\"audioinput\"===e.kind&&[\"airpod\",\"headphone\",\"earphone\"].find(function(n){return e.label.toLowerCase().includes(n)})});n&&(c.deviceId={ideal:n.deviceId})})}();return l&&l.then?l.then(n):n()}()}catch(e){return c(e)}return l&&l.then?l.then(void 0,c):l}(0,function(e){var n,t;throw null==(n=u)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=s)||t.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){try{return this.inputStream.getTracks().forEach(function(e){return e.stop()}),Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},n.setMuted=function(e){this.worklet.port.postMessage({type:\"setMuted\",isMuted:e})},e}(),a=new Blob(['\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '],{type:\"application/javascript\"}),s=URL.createObjectURL(a),u=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=n,this.gain=t,this.worklet=o}return e.create=function(n){var t=n.sampleRate,o=n.format;try{var r=null;return Promise.resolve(function(n,i){try{var a=(u=(r=new AudioContext({sampleRate:t})).createAnalyser(),(c=r.createGain()).connect(u),u.connect(r.destination),Promise.resolve(r.audioWorklet.addModule(s)).then(function(){var n=new AudioWorkletNode(r,\"audio-concat-processor\");return n.port.postMessage({type:\"setFormat\",format:o}),n.connect(c),Promise.resolve(r.resume()).then(function(){return new e(r,u,c,n)})}))}catch(e){return i(e)}var u,c;return a&&a.then?a.then(void 0,i):a}(0,function(e){var n;throw null==(n=r)||n.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}();function c(e){return!!e.type}var l=/*#__PURE__*/function(){function e(e,n,t,o){var r=this;this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.socket=e,this.conversationId=n,this.inputFormat=t,this.outputFormat=o,this.socket.addEventListener(\"error\",function(e){setTimeout(function(){return r.disconnect({reason:\"error\",message:\"The connection was closed due to a socket error.\",context:e})},0)}),this.socket.addEventListener(\"close\",function(e){r.disconnect(1e3===e.code?{reason:\"agent\",context:e}:{reason:\"error\",message:e.reason||\"The connection was closed by the server.\",context:e})}),this.socket.addEventListener(\"message\",function(e){try{var n=JSON.parse(e.data);if(!c(n))return;r.onMessageCallback?r.onMessageCallback(n):r.queue.push(n)}catch(e){}})}e.create=function(n){try{var t=null;return Promise.resolve(function(o,r){try{var i=(s=null!=(a=n.origin)?a:\"wss://api.elevenlabs.io\",u=n.signedUrl?n.signedUrl:s+\"/v1/convai/conversation?agent_id=\"+n.agentId,l=[\"convai\"],n.authorization&&l.push(\"bearer.\"+n.authorization),t=new WebSocket(u,l),Promise.resolve(new Promise(function(e,o){t.addEventListener(\"open\",function(){var e,o,r,i,a,s={type:\"conversation_initiation_client_data\"};n.overrides&&(s.conversation_config_override={agent:{prompt:null==(o=n.overrides.agent)?void 0:o.prompt,first_message:null==(r=n.overrides.agent)?void 0:r.firstMessage,language:null==(i=n.overrides.agent)?void 0:i.language},tts:{voice_id:null==(a=n.overrides.tts)?void 0:a.voiceId}}),n.customLlmExtraBody&&(s.custom_llm_extra_body=n.customLlmExtraBody),n.dynamicVariables&&(s.dynamic_variables=n.dynamicVariables),null==(e=t)||e.send(JSON.stringify(s))},{once:!0}),t.addEventListener(\"error\",function(e){setTimeout(function(){return o(e)},0)}),t.addEventListener(\"close\",o),t.addEventListener(\"message\",function(n){var t=JSON.parse(n.data);c(t)&&(\"conversation_initiation_metadata\"===t.type?e(t.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})})).then(function(n){var o=n.conversation_id,r=n.agent_output_audio_format,i=n.user_input_audio_format,a=d(null!=i?i:\"pcm_16000\"),s=d(r);return new e(t,o,a,s)}))}catch(e){return r(e)}var a,s,u,l;return i&&i.then?i.then(void 0,r):i}(0,function(e){var n;throw null==(n=t)||n.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){this.socket.close()},n.sendMessage=function(e){this.socket.send(JSON.stringify(e))},n.onMessage=function(e){this.onMessageCallback=e,this.queue.forEach(e),this.queue=[]},n.onDisconnect=function(e){this.onDisconnectCallback=e,this.disconnectionDetails&&e(this.disconnectionDetails)},n.disconnect=function(e){var n;this.disconnectionDetails||(this.disconnectionDetails=e,null==(n=this.onDisconnectCallback)||n.call(this,e))},e}();function d(e){var n=e.split(\"_\"),t=n[0],o=n[1];if(![\"pcm\",\"ulaw\"].includes(t))throw new Error(\"Invalid format: \"+e);var r=parseInt(o);if(isNaN(r))throw new Error(\"Invalid sample rate: \"+o);return{format:t,sampleRate:r}}function h(e,n){try{var t=e()}catch(e){return n(e)}return t&&t.then?t.then(void 0,n):t}var p={clientTools:{}},f={onConnect:function(){},onDebug:function(){},onDisconnect:function(){},onError:function(){},onMessage:function(){},onAudio:function(){},onModeChange:function(){},onStatusChange:function(){},onCanSendFeedbackChange:function(){}},m=/*#__PURE__*/function(){function t(e,t,o,r,i){var a=this,s=this,u=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.wakeLock=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSession=function(){return u.endSessionWithDetails({reason:\"user\"})},this.endSessionWithDetails=function(e){try{var n=function(){return a.connection.close(),Promise.resolve(a.input.close()).then(function(){return Promise.resolve(a.output.close()).then(function(){a.updateStatus(\"disconnected\"),a.options.onDisconnect(e)})})};if(\"connected\"!==a.status&&\"connecting\"!==a.status)return Promise.resolve();a.updateStatus(\"disconnecting\");var t=h(function(){var e;return Promise.resolve(null==(e=a.wakeLock)?void 0:e.release()).then(function(){a.wakeLock=null})},function(){});return Promise.resolve(t&&t.then?t.then(n):n())}catch(e){return Promise.reject(e)}},this.updateMode=function(e){e!==u.mode&&(u.mode=e,u.options.onModeChange({mode:e}))},this.updateStatus=function(e){e!==u.status&&(u.status=e,u.options.onStatusChange({status:e}))},this.updateCanSendFeedback=function(){var e=u.currentEventId!==u.lastFeedbackEventId;u.canSendFeedback!==e&&(u.canSendFeedback=e,u.options.onCanSendFeedbackChange({canSendFeedback:e}))},this.onMessage=function(e){try{switch(e.type){case\"interruption\":return e.interruption_event&&(s.lastInterruptTimestamp=e.interruption_event.event_id),s.fadeOutAudio(),Promise.resolve();case\"agent_response\":return s.options.onMessage({source:\"ai\",message:e.agent_response_event.agent_response}),Promise.resolve();case\"user_transcript\":return s.options.onMessage({source:\"user\",message:e.user_transcription_event.user_transcript}),Promise.resolve();case\"internal_tentative_agent_response\":return s.options.onDebug({type:\"tentative_agent_response\",response:e.tentative_agent_response_internal_event.tentative_agent_response}),Promise.resolve();case\"client_tool_call\":return Promise.resolve(function(){if(s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)){var n=h(function(){return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n){var t=\"object\"==typeof n?JSON.stringify(n):String(n);s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:t,is_error:!1})})},function(n){s.onError(\"Client tool execution failed with following error: \"+(null==n?void 0:n.message),{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool execution failed: \"+(null==n?void 0:n.message),is_error:!0})});if(n&&n.then)return n.then(function(){})}else{if(s.options.onUnhandledClientToolCall)return void s.options.onUnhandledClientToolCall(e.client_tool_call);s.onError(\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",is_error:!0})}}());case\"audio\":return s.lastInterruptTimestamp<=e.audio_event.event_id&&(s.options.onAudio(e.audio_event.audio_base_64),s.addAudioBase64Chunk(e.audio_event.audio_base_64),s.currentEventId=e.audio_event.event_id,s.updateCanSendFeedback(),s.updateMode(\"speaking\")),Promise.resolve();case\"ping\":return s.connection.sendMessage({type:\"pong\",event_id:e.ping_event.event_id}),Promise.resolve();default:return s.options.onDebug(e),Promise.resolve()}}catch(e){return Promise.reject(e)}},this.onInputWorkletMessage=function(e){var n,t;\"connected\"===u.status&&u.connection.sendMessage({user_audio_chunk:(n=e.data[0].buffer,t=new Uint8Array(n),window.btoa(String.fromCharCode.apply(String,t)))})},this.onOutputWorkletMessage=function(e){var n=e.data;\"process\"===n.type&&u.updateMode(n.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=function(e){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"}),u.output.worklet.port.postMessage({type:\"buffer\",buffer:n(e)})},this.fadeOutAudio=function(){u.updateMode(\"listening\"),u.output.worklet.port.postMessage({type:\"interrupt\"}),u.output.gain.gain.exponentialRampToValueAtTime(1e-4,u.output.context.currentTime+2),setTimeout(function(){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.onError=function(e,n){console.error(e,n),u.options.onError(e,n)},this.calculateVolume=function(e){if(0===e.length)return 0;for(var n=0,t=0;t<e.length;t++)n+=e[t]/255;return(n/=e.length)<0?0:n>1?1:n},this.getId=function(){return u.connection.conversationId},this.isOpen=function(){return\"connected\"===u.status},this.setVolume=function(e){u.volume=e.volume},this.setMicMuted=function(e){u.input.setMuted(e)},this.getInputByteFrequencyData=function(){return null!=u.inputFrequencyData||(u.inputFrequencyData=new Uint8Array(u.input.analyser.frequencyBinCount)),u.input.analyser.getByteFrequencyData(u.inputFrequencyData),u.inputFrequencyData},this.getOutputByteFrequencyData=function(){return null!=u.outputFrequencyData||(u.outputFrequencyData=new Uint8Array(u.output.analyser.frequencyBinCount)),u.output.analyser.getByteFrequencyData(u.outputFrequencyData),u.outputFrequencyData},this.getInputVolume=function(){return u.calculateVolume(u.getInputByteFrequencyData())},this.getOutputVolume=function(){return u.calculateVolume(u.getOutputByteFrequencyData())},this.sendFeedback=function(e){u.canSendFeedback?(u.connection.sendMessage({type:\"feedback\",score:e?\"like\":\"dislike\",event_id:u.currentEventId}),u.lastFeedbackEventId=u.currentEventId,u.updateCanSendFeedback()):console.warn(0===u.lastFeedbackEventId?\"Cannot send feedback: the conversation has not started yet.\":\"Cannot send feedback: feedback has already been sent for the current response.\")},this.sendContextualUpdate=function(e){u.connection.sendMessage({type:\"contextual_update\",text:e})},this.options=e,this.connection=t,this.input=o,this.output=r,this.wakeLock=i,this.options.onConnect({conversationId:t.conversationId}),this.connection.onDisconnect(this.endSessionWithDetails),this.connection.onMessage(this.onMessage),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}return t.startSession=function(n){try{var o=function(){return h(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:!0})).then(function(o){var h;function p(){return Promise.resolve(l.create(n)).then(function(o){return c=o,Promise.resolve(Promise.all([i.create(e({},c.inputFormat,{preferHeadphonesForIosDevices:n.preferHeadphonesForIosDevices})),u.create(c.outputFormat)])).then(function(e){var n;return s=e[0],d=e[1],null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),m=null,new t(a,c,s,d,v)})})}m=o;var f,g=null!=(h=n.connectionDelay)?h:{default:0,android:3e3},y=g.default;if(/android/i.test(navigator.userAgent))y=null!=(f=g.android)?f:y;else if(r()){var _;y=null!=(_=g.ios)?_:y}var b=function(){if(y>0)return Promise.resolve(new Promise(function(e){return setTimeout(e,y)})).then(function(){})}();return b&&b.then?b.then(p):p()})},function(e){var n,t,o;return a.onStatusChange({status:\"disconnected\"}),null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=c)||t.close(),Promise.resolve(null==(o=s)?void 0:o.close()).then(function(){var n;return Promise.resolve(null==(n=d)?void 0:n.close()).then(function(){function n(){throw e}var t=h(function(){var e;return Promise.resolve(null==(e=v)?void 0:e.release()).then(function(){v=null})},function(){});return t&&t.then?t.then(n):n()})})})},a=e({},p,f,n);a.onStatusChange({status:\"connecting\"}),a.onCanSendFeedbackChange({canSendFeedback:!1});var s=null,c=null,d=null,m=null,v=null,g=function(e){if(null==(e=n.useWakeLock)||e){var t=h(function(){return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e){v=e})},function(){});if(t&&t.then)return t.then(function(){})}}();return Promise.resolve(g&&g.then?g.then(o):o())}catch(e){return Promise.reject(e)}},t}();function v(e,n,t){return void 0===t&&(t=\"https://api.elevenlabs.io\"),fetch(t+\"/v1/convai/conversations/\"+e+\"/feedback\",{method:\"POST\",body:JSON.stringify({feedback:n?\"like\":\"dislike\"}),headers:{\"Content-Type\":\"application/json\"}})}export{m as Conversation,v as postOverallFeedback};\n//# sourceMappingURL=lib.module.js.map\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output, wakeLock);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult =\n              typeof result === \"object\"\n                ? JSON.stringify(result)\n                : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            return;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64);\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n\n  public sendContextualUpdate = (text: string) => {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["$ee5c819c8591c8f0$var$e","Object","assign","bind","e","n","arguments","length","t","o","hasOwnProperty","call","apply","$ee5c819c8591c8f0$var$t","Blob","type","$ee5c819c8591c8f0$var$o","URL","createObjectURL","$ee5c819c8591c8f0$var$r","includes","navigator","platform","userAgent","document","$ee5c819c8591c8f0$var$i","context","analyser","worklet","inputStream","create","sampleRate","i","format","a","preferHeadphonesForIosDevices","s","u","Promise","resolve","c","l","audioWorklet","addModule","then","mediaDevices","getUserMedia","audio","createMediaStreamSource","r","AudioWorkletNode","port","postMessage","connect","resume","getSupportedConstraints","window","AudioContext","createAnalyser","ideal","echoCancellation","noiseSuppression","enumerateDevices","find","kind","label","toLowerCase","deviceId","getTracks","forEach","stop","close","reject","prototype","setMuted","isMuted","$ee5c819c8591c8f0$var$a","$ee5c819c8591c8f0$var$s","$ee5c819c8591c8f0$var$u","gain","createGain","destination","$ee5c819c8591c8f0$var$l","socket","conversationId","inputFormat","outputFormat","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","JSON","parse","data","push","origin","signedUrl","agentId","authorization","WebSocket","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","$ee5c819c8591c8f0$var$c","conversation_initiation_metadata_event","console","warn","conversation_id","agent_output_audio_format","user_input_audio_format","$ee5c819c8591c8f0$var$d","sendMessage","onMessage","onDisconnect","split","Error","parseInt","isNaN","$ee5c819c8591c8f0$var$h","$ee5c819c8591c8f0$var$p","clientTools","$ee5c819c8591c8f0$var$f","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","$ee5c819c8591c8f0$export$8e86b22308382a1","options","connection","input","output","wakeLock","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","release","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","source","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","client_tool_call","tool_name","parameters","String","tool_call_id","result","is_error","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","user_audio_chunk","Uint8Array","buffer","btoa","fromCharCode","onOutputWorkletMessage","finished","value","$ee5c819c8591c8f0$var$n","atob","charCodeAt","exponentialRampToValueAtTime","currentTime","error","calculateVolume","getId","isOpen","setVolume","setMicMuted","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","score","sendContextualUpdate","text","onmessage","startSession","p","all","d","m","v","_","h","f","g","connectionDelay","default","android","y","test","ios","b","useWakeLock","request","$dad545c909cfec2d$var$startBtn","getElementById","$dad545c909cfec2d$var$stopBtn","$dad545c909cfec2d$var$statusEl","$dad545c909cfec2d$var$conversationInstance","$dad545c909cfec2d$var$audio","$dad545c909cfec2d$var$urlParams","URLSearchParams","location","search","$dad545c909cfec2d$var$config","name","get","$dad545c909cfec2d$var$loadConfig","fetch","json","log","textContent","startBtn","disabled","innerText","$dad545c909cfec2d$var$updateStatus","$dad545c909cfec2d$var$startConversation","startAudio","classList","add","remove","Audio","play","onended","$dad545c909cfec2d$var$endConversation","pause","base64ToArrayBuffer","base64","binaryString","len","bytes","blob","rawAudioProcessor","isIosDevice","Input","this","_ref","_temp4","_temp2","_navigator$mediaDevic","supportsSampleRateConstraint","_temp","_temp3","availableDevices","idealDevice","keyword","_catch","_inputStream","_context","track","_proto","audioConcatProcessor","Output","isValidSocketEvent","event","Connection","_this","parsedEvent","config","_config$origin","url","protocols","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","conversationConfig","parseFormat","_socket2","callback","details","_this$onDisconnectCal","_format$split","formatPart","sampleRatePart","defaultClientTools","defaultCallbacks","Conversation","_this2","_this3","_this2$wakeLock","formattedResult","chunk","frequencyData","_ref2","_this$outputFrequency","like","_temp10","_options$connectionDe","_temp6","_Connection$create","_extends","_Promise$all","_preliminaryInputStre","preliminaryInputStream","fullOptions","_delayConfig$android","delayConfig","delay","_delayConfig$ios","_temp5","_preliminaryInputStre2","_connection","_input","_output","_temp8","_temp7","_wakeLock","_temp9","_options$useWakeLock","_navigator$wakeLock$r","postOverallFeedback","method","body","feedback","headers"],"version":3,"file":"arapy-11labs.1df91bd0.js.map","sourceRoot":"/__parcel_source_root/"}