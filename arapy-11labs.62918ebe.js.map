{"mappings":"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","sources":["<anon>","index.js","node_modules/@11labs/client/dist/lib.module.js","node_modules/@11labs/client/src/utils/audio.ts","node_modules/@11labs/client/src/utils/rawAudioProcessor.ts","node_modules/@11labs/client/src/utils/compatibility.ts","node_modules/@11labs/client/src/utils/input.ts","node_modules/@11labs/client/src/utils/audioConcatProcessor.ts","node_modules/@11labs/client/src/utils/output.ts","node_modules/@11labs/client/src/utils/events.ts","node_modules/@11labs/client/src/utils/connection.ts","node_modules/@11labs/client/src/index.ts"],"sourcesContent":["// Importa o Conversation do pacote @11labs/client\nfunction $ee5c819c8591c8f0$var$e() {\n    return $ee5c819c8591c8f0$var$e = Object.assign ? Object.assign.bind() : function(e) {\n        for(var n = 1; n < arguments.length; n++){\n            var t = arguments[n];\n            for(var o in t)({}).hasOwnProperty.call(t, o) && (e[o] = t[o]);\n        }\n        return e;\n    }, $ee5c819c8591c8f0$var$e.apply(null, arguments);\n}\nfunction $ee5c819c8591c8f0$var$n(e) {\n    for(var n = window.atob(e), t = n.length, o = new Uint8Array(t), r = 0; r < t; r++)o[r] = n.charCodeAt(r);\n    return o.buffer;\n}\nvar $ee5c819c8591c8f0$var$t = new Blob([\n    '\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$o = URL.createObjectURL($ee5c819c8591c8f0$var$t);\nfunction $ee5c819c8591c8f0$var$r() {\n    return [\n        \"iPad Simulator\",\n        \"iPhone Simulator\",\n        \"iPod Simulator\",\n        \"iPad\",\n        \"iPhone\",\n        \"iPod\"\n    ].includes(navigator.platform) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nvar $ee5c819c8591c8f0$var$i = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e, this.analyser = n, this.worklet = t, this.inputStream = o;\n    }\n    e.create = function(n) {\n        var t = n.sampleRate, i = n.format, a = n.preferHeadphonesForIosDevices;\n        try {\n            var s = null, u = null;\n            return Promise.resolve(function(n, c) {\n                try {\n                    var l = function() {\n                        function n() {\n                            function n() {\n                                return Promise.resolve(s.audioWorklet.addModule($ee5c819c8591c8f0$var$o)).then(function() {\n                                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                                        audio: c\n                                    })).then(function(n) {\n                                        var o = s.createMediaStreamSource(u = n), r = new AudioWorkletNode(s, \"raw-audio-processor\");\n                                        return r.port.postMessage({\n                                            type: \"setFormat\",\n                                            format: i,\n                                            sampleRate: t\n                                        }), o.connect(a), a.connect(r), Promise.resolve(s.resume()).then(function() {\n                                            return new e(s, a, r, u);\n                                        });\n                                    });\n                                });\n                            }\n                            var r = navigator.mediaDevices.getSupportedConstraints().sampleRate, a = (s = new window.AudioContext(r ? {\n                                sampleRate: t\n                            } : {})).createAnalyser(), l = function() {\n                                if (!r) return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function() {});\n                            }();\n                            return l && l.then ? l.then(n) : n();\n                        }\n                        var c = {\n                            sampleRate: {\n                                ideal: t\n                            },\n                            echoCancellation: {\n                                ideal: !0\n                            },\n                            noiseSuppression: {\n                                ideal: !0\n                            }\n                        }, l = function() {\n                            if ($ee5c819c8591c8f0$var$r() && a) return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e) {\n                                var n = e.find(function(e) {\n                                    return \"audioinput\" === e.kind && [\n                                        \"airpod\",\n                                        \"headphone\",\n                                        \"earphone\"\n                                    ].find(function(n) {\n                                        return e.label.toLowerCase().includes(n);\n                                    });\n                                });\n                                n && (c.deviceId = {\n                                    ideal: n.deviceId\n                                });\n                            });\n                        }();\n                        return l && l.then ? l.then(n) : n();\n                    }();\n                } catch (e) {\n                    return c(e);\n                }\n                return l && l.then ? l.then(void 0, c) : l;\n            }(0, function(e) {\n                var n, t;\n                throw null == (n = u) || n.getTracks().forEach(function(e) {\n                    return e.stop();\n                }), null == (t = s) || t.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        try {\n            return this.inputStream.getTracks().forEach(function(e) {\n                return e.stop();\n            }), Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, n.setMuted = function(e) {\n        this.worklet.port.postMessage({\n            type: \"setMuted\",\n            isMuted: e\n        });\n    }, e;\n}(), $ee5c819c8591c8f0$var$a = new Blob([\n    '\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$s = URL.createObjectURL($ee5c819c8591c8f0$var$a), $ee5c819c8591c8f0$var$u = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e, this.analyser = n, this.gain = t, this.worklet = o;\n    }\n    return e.create = function(n) {\n        var t = n.sampleRate, o = n.format;\n        try {\n            var r = null;\n            return Promise.resolve(function(n, i) {\n                try {\n                    var a = (u = (r = new AudioContext({\n                        sampleRate: t\n                    })).createAnalyser(), (c = r.createGain()).connect(u), u.connect(r.destination), Promise.resolve(r.audioWorklet.addModule($ee5c819c8591c8f0$var$s)).then(function() {\n                        var n = new AudioWorkletNode(r, \"audio-concat-processor\");\n                        return n.port.postMessage({\n                            type: \"setFormat\",\n                            format: o\n                        }), n.connect(c), Promise.resolve(r.resume()).then(function() {\n                            return new e(r, u, c, n);\n                        });\n                    }));\n                } catch (e) {\n                    return i(e);\n                }\n                var u, c;\n                return a && a.then ? a.then(void 0, i) : a;\n            }(0, function(e) {\n                var n;\n                throw null == (n = r) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        try {\n            return Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$c(e) {\n    return !!e.type;\n}\nvar $ee5c819c8591c8f0$var$l = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        var r = this;\n        this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e, this.conversationId = n, this.inputFormat = t, this.outputFormat = o, this.socket.addEventListener(\"error\", function(e) {\n            setTimeout(function() {\n                return r.disconnect({\n                    reason: \"error\",\n                    message: \"The connection was closed due to a socket error.\",\n                    context: e\n                });\n            }, 0);\n        }), this.socket.addEventListener(\"close\", function(e) {\n            r.disconnect(1e3 === e.code ? {\n                reason: \"agent\",\n                context: e\n            } : {\n                reason: \"error\",\n                message: e.reason || \"The connection was closed by the server.\",\n                context: e\n            });\n        }), this.socket.addEventListener(\"message\", function(e) {\n            try {\n                var n = JSON.parse(e.data);\n                if (!$ee5c819c8591c8f0$var$c(n)) return;\n                r.onMessageCallback ? r.onMessageCallback(n) : r.queue.push(n);\n            } catch (e) {}\n        });\n    }\n    e.create = function(n) {\n        try {\n            var t = null;\n            return Promise.resolve(function(o, r) {\n                try {\n                    var i = (s = null != (a = n.origin) ? a : \"wss://api.elevenlabs.io\", u = n.signedUrl ? n.signedUrl : s + \"/v1/convai/conversation?agent_id=\" + n.agentId, l = [\n                        \"convai\"\n                    ], n.authorization && l.push(\"bearer.\" + n.authorization), t = new WebSocket(u, l), Promise.resolve(new Promise(function(e, o) {\n                        t.addEventListener(\"open\", function() {\n                            var e, o, r, i, a, s = {\n                                type: \"conversation_initiation_client_data\"\n                            };\n                            n.overrides && (s.conversation_config_override = {\n                                agent: {\n                                    prompt: null == (o = n.overrides.agent) ? void 0 : o.prompt,\n                                    first_message: null == (r = n.overrides.agent) ? void 0 : r.firstMessage,\n                                    language: null == (i = n.overrides.agent) ? void 0 : i.language\n                                },\n                                tts: {\n                                    voice_id: null == (a = n.overrides.tts) ? void 0 : a.voiceId\n                                }\n                            }), n.customLlmExtraBody && (s.custom_llm_extra_body = n.customLlmExtraBody), n.dynamicVariables && (s.dynamic_variables = n.dynamicVariables), null == (e = t) || e.send(JSON.stringify(s));\n                        }, {\n                            once: !0\n                        }), t.addEventListener(\"error\", function(e) {\n                            setTimeout(function() {\n                                return o(e);\n                            }, 0);\n                        }), t.addEventListener(\"close\", o), t.addEventListener(\"message\", function(n) {\n                            var t = JSON.parse(n.data);\n                            $ee5c819c8591c8f0$var$c(t) && (\"conversation_initiation_metadata\" === t.type ? e(t.conversation_initiation_metadata_event) : console.warn(\"First received message is not conversation metadata.\"));\n                        }, {\n                            once: !0\n                        });\n                    })).then(function(n) {\n                        var o = n.conversation_id, r = n.agent_output_audio_format, i = n.user_input_audio_format, a = $ee5c819c8591c8f0$var$d(null != i ? i : \"pcm_16000\"), s = $ee5c819c8591c8f0$var$d(r);\n                        return new e(t, o, a, s);\n                    }));\n                } catch (e) {\n                    return r(e);\n                }\n                var a, s, u, l;\n                return i && i.then ? i.then(void 0, r) : i;\n            }(0, function(e) {\n                var n;\n                throw null == (n = t) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        this.socket.close();\n    }, n.sendMessage = function(e) {\n        this.socket.send(JSON.stringify(e));\n    }, n.onMessage = function(e) {\n        this.onMessageCallback = e, this.queue.forEach(e), this.queue = [];\n    }, n.onDisconnect = function(e) {\n        this.onDisconnectCallback = e, this.disconnectionDetails && e(this.disconnectionDetails);\n    }, n.disconnect = function(e) {\n        var n;\n        this.disconnectionDetails || (this.disconnectionDetails = e, null == (n = this.onDisconnectCallback) || n.call(this, e));\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$d(e) {\n    var n = e.split(\"_\"), t = n[0], o = n[1];\n    if (![\n        \"pcm\",\n        \"ulaw\"\n    ].includes(t)) throw new Error(\"Invalid format: \" + e);\n    var r = parseInt(o);\n    if (isNaN(r)) throw new Error(\"Invalid sample rate: \" + o);\n    return {\n        format: t,\n        sampleRate: r\n    };\n}\nfunction $ee5c819c8591c8f0$var$h(e, n) {\n    try {\n        var t = e();\n    } catch (e) {\n        return n(e);\n    }\n    return t && t.then ? t.then(void 0, n) : t;\n}\nvar $ee5c819c8591c8f0$var$p = {\n    clientTools: {}\n}, $ee5c819c8591c8f0$var$f = {\n    onConnect: function() {},\n    onDebug: function() {},\n    onDisconnect: function() {},\n    onError: function() {},\n    onMessage: function() {},\n    onAudio: function() {},\n    onModeChange: function() {},\n    onStatusChange: function() {},\n    onCanSendFeedbackChange: function() {}\n}, $ee5c819c8591c8f0$export$8e86b22308382a1 = /*#__PURE__*/ function() {\n    function t(e, t, o, r, i) {\n        var a = this, s = this, u = this;\n        this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.wakeLock = void 0, this.lastInterruptTimestamp = 0, this.mode = \"listening\", this.status = \"connecting\", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = !1, this.endSession = function() {\n            return u.endSessionWithDetails({\n                reason: \"user\"\n            });\n        }, this.endSessionWithDetails = function(e) {\n            try {\n                var n = function() {\n                    return a.connection.close(), Promise.resolve(a.input.close()).then(function() {\n                        return Promise.resolve(a.output.close()).then(function() {\n                            a.updateStatus(\"disconnected\"), a.options.onDisconnect(e);\n                        });\n                    });\n                };\n                if (\"connected\" !== a.status && \"connecting\" !== a.status) return Promise.resolve();\n                a.updateStatus(\"disconnecting\");\n                var t = $ee5c819c8591c8f0$var$h(function() {\n                    var e;\n                    return Promise.resolve(null == (e = a.wakeLock) ? void 0 : e.release()).then(function() {\n                        a.wakeLock = null;\n                    });\n                }, function() {});\n                return Promise.resolve(t && t.then ? t.then(n) : n());\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.updateMode = function(e) {\n            e !== u.mode && (u.mode = e, u.options.onModeChange({\n                mode: e\n            }));\n        }, this.updateStatus = function(e) {\n            e !== u.status && (u.status = e, u.options.onStatusChange({\n                status: e\n            }));\n        }, this.updateCanSendFeedback = function() {\n            var e = u.currentEventId !== u.lastFeedbackEventId;\n            u.canSendFeedback !== e && (u.canSendFeedback = e, u.options.onCanSendFeedbackChange({\n                canSendFeedback: e\n            }));\n        }, this.onMessage = function(e) {\n            try {\n                switch(e.type){\n                    case \"interruption\":\n                        return e.interruption_event && (s.lastInterruptTimestamp = e.interruption_event.event_id), s.fadeOutAudio(), Promise.resolve();\n                    case \"agent_response\":\n                        return s.options.onMessage({\n                            source: \"ai\",\n                            message: e.agent_response_event.agent_response\n                        }), Promise.resolve();\n                    case \"user_transcript\":\n                        return s.options.onMessage({\n                            source: \"user\",\n                            message: e.user_transcription_event.user_transcript\n                        }), Promise.resolve();\n                    case \"internal_tentative_agent_response\":\n                        return s.options.onDebug({\n                            type: \"tentative_agent_response\",\n                            response: e.tentative_agent_response_internal_event.tentative_agent_response\n                        }), Promise.resolve();\n                    case \"client_tool_call\":\n                        return Promise.resolve(function() {\n                            if (s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)) {\n                                var n = $ee5c819c8591c8f0$var$h(function() {\n                                    return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n) {\n                                        var t = \"object\" == typeof n ? JSON.stringify(n) : String(n);\n                                        s.connection.sendMessage({\n                                            type: \"client_tool_result\",\n                                            tool_call_id: e.client_tool_call.tool_call_id,\n                                            result: t,\n                                            is_error: !1\n                                        });\n                                    });\n                                }, function(n) {\n                                    s.onError(\"Client tool execution failed with following error: \" + (null == n ? void 0 : n.message), {\n                                        clientToolName: e.client_tool_call.tool_name\n                                    }), s.connection.sendMessage({\n                                        type: \"client_tool_result\",\n                                        tool_call_id: e.client_tool_call.tool_call_id,\n                                        result: \"Client tool execution failed: \" + (null == n ? void 0 : n.message),\n                                        is_error: !0\n                                    });\n                                });\n                                if (n && n.then) return n.then(function() {});\n                            } else {\n                                if (s.options.onUnhandledClientToolCall) return void s.options.onUnhandledClientToolCall(e.client_tool_call);\n                                s.onError(\"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\", {\n                                    clientToolName: e.client_tool_call.tool_name\n                                }), s.connection.sendMessage({\n                                    type: \"client_tool_result\",\n                                    tool_call_id: e.client_tool_call.tool_call_id,\n                                    result: \"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\",\n                                    is_error: !0\n                                });\n                            }\n                        }());\n                    case \"audio\":\n                        return s.lastInterruptTimestamp <= e.audio_event.event_id && (s.options.onAudio(e.audio_event.audio_base_64), s.addAudioBase64Chunk(e.audio_event.audio_base_64), s.currentEventId = e.audio_event.event_id, s.updateCanSendFeedback(), s.updateMode(\"speaking\")), Promise.resolve();\n                    case \"ping\":\n                        return s.connection.sendMessage({\n                            type: \"pong\",\n                            event_id: e.ping_event.event_id\n                        }), Promise.resolve();\n                    default:\n                        return s.options.onDebug(e), Promise.resolve();\n                }\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.onInputWorkletMessage = function(e) {\n            var n, t;\n            \"connected\" === u.status && u.connection.sendMessage({\n                user_audio_chunk: (n = e.data[0].buffer, t = new Uint8Array(n), window.btoa(String.fromCharCode.apply(String, t)))\n            });\n        }, this.onOutputWorkletMessage = function(e) {\n            var n = e.data;\n            \"process\" === n.type && u.updateMode(n.finished ? \"listening\" : \"speaking\");\n        }, this.addAudioBase64Chunk = function(e) {\n            u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                type: \"clearInterrupted\"\n            }), u.output.worklet.port.postMessage({\n                type: \"buffer\",\n                buffer: $ee5c819c8591c8f0$var$n(e)\n            });\n        }, this.fadeOutAudio = function() {\n            u.updateMode(\"listening\"), u.output.worklet.port.postMessage({\n                type: \"interrupt\"\n            }), u.output.gain.gain.exponentialRampToValueAtTime(1e-4, u.output.context.currentTime + 2), setTimeout(function() {\n                u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                    type: \"clearInterrupted\"\n                });\n            }, 2e3);\n        }, this.onError = function(e, n) {\n            console.error(e, n), u.options.onError(e, n);\n        }, this.calculateVolume = function(e) {\n            if (0 === e.length) return 0;\n            for(var n = 0, t = 0; t < e.length; t++)n += e[t] / 255;\n            return (n /= e.length) < 0 ? 0 : n > 1 ? 1 : n;\n        }, this.getId = function() {\n            return u.connection.conversationId;\n        }, this.isOpen = function() {\n            return \"connected\" === u.status;\n        }, this.setVolume = function(e) {\n            u.volume = e.volume;\n        }, this.setMicMuted = function(e) {\n            u.input.setMuted(e);\n        }, this.getInputByteFrequencyData = function() {\n            return null != u.inputFrequencyData || (u.inputFrequencyData = new Uint8Array(u.input.analyser.frequencyBinCount)), u.input.analyser.getByteFrequencyData(u.inputFrequencyData), u.inputFrequencyData;\n        }, this.getOutputByteFrequencyData = function() {\n            return null != u.outputFrequencyData || (u.outputFrequencyData = new Uint8Array(u.output.analyser.frequencyBinCount)), u.output.analyser.getByteFrequencyData(u.outputFrequencyData), u.outputFrequencyData;\n        }, this.getInputVolume = function() {\n            return u.calculateVolume(u.getInputByteFrequencyData());\n        }, this.getOutputVolume = function() {\n            return u.calculateVolume(u.getOutputByteFrequencyData());\n        }, this.sendFeedback = function(e) {\n            u.canSendFeedback ? (u.connection.sendMessage({\n                type: \"feedback\",\n                score: e ? \"like\" : \"dislike\",\n                event_id: u.currentEventId\n            }), u.lastFeedbackEventId = u.currentEventId, u.updateCanSendFeedback()) : console.warn(0 === u.lastFeedbackEventId ? \"Cannot send feedback: the conversation has not started yet.\" : \"Cannot send feedback: feedback has already been sent for the current response.\");\n        }, this.sendContextualUpdate = function(e) {\n            u.connection.sendMessage({\n                type: \"contextual_update\",\n                text: e\n            });\n        }, this.options = e, this.connection = t, this.input = o, this.output = r, this.wakeLock = i, this.options.onConnect({\n            conversationId: t.conversationId\n        }), this.connection.onDisconnect(this.endSessionWithDetails), this.connection.onMessage(this.onMessage), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus(\"connected\");\n    }\n    return t.startSession = function(n) {\n        try {\n            var o = function() {\n                return $ee5c819c8591c8f0$var$h(function() {\n                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                        audio: !0\n                    })).then(function(o) {\n                        var h;\n                        function p() {\n                            return Promise.resolve($ee5c819c8591c8f0$var$l.create(n)).then(function(o) {\n                                return c = o, Promise.resolve(Promise.all([\n                                    $ee5c819c8591c8f0$var$i.create($ee5c819c8591c8f0$var$e({}, c.inputFormat, {\n                                        preferHeadphonesForIosDevices: n.preferHeadphonesForIosDevices\n                                    })),\n                                    $ee5c819c8591c8f0$var$u.create(c.outputFormat)\n                                ])).then(function(e) {\n                                    var n;\n                                    return s = e[0], d = e[1], null == (n = m) || n.getTracks().forEach(function(e) {\n                                        return e.stop();\n                                    }), m = null, new t(a, c, s, d, v);\n                                });\n                            });\n                        }\n                        m = o;\n                        var f, g = null != (h = n.connectionDelay) ? h : {\n                            default: 0,\n                            android: 3e3\n                        }, y = g.default;\n                        if (/android/i.test(navigator.userAgent)) y = null != (f = g.android) ? f : y;\n                        else if ($ee5c819c8591c8f0$var$r()) {\n                            var _;\n                            y = null != (_ = g.ios) ? _ : y;\n                        }\n                        var b = function() {\n                            if (y > 0) return Promise.resolve(new Promise(function(e) {\n                                return setTimeout(e, y);\n                            })).then(function() {});\n                        }();\n                        return b && b.then ? b.then(p) : p();\n                    });\n                }, function(e) {\n                    var n, t, o;\n                    return a.onStatusChange({\n                        status: \"disconnected\"\n                    }), null == (n = m) || n.getTracks().forEach(function(e) {\n                        return e.stop();\n                    }), null == (t = c) || t.close(), Promise.resolve(null == (o = s) ? void 0 : o.close()).then(function() {\n                        var n;\n                        return Promise.resolve(null == (n = d) ? void 0 : n.close()).then(function() {\n                            function n() {\n                                throw e;\n                            }\n                            var t = $ee5c819c8591c8f0$var$h(function() {\n                                var e;\n                                return Promise.resolve(null == (e = v) ? void 0 : e.release()).then(function() {\n                                    v = null;\n                                });\n                            }, function() {});\n                            return t && t.then ? t.then(n) : n();\n                        });\n                    });\n                });\n            }, a = $ee5c819c8591c8f0$var$e({}, $ee5c819c8591c8f0$var$p, $ee5c819c8591c8f0$var$f, n);\n            a.onStatusChange({\n                status: \"connecting\"\n            }), a.onCanSendFeedbackChange({\n                canSendFeedback: !1\n            });\n            var s = null, c = null, d = null, m = null, v = null, g = function(e) {\n                if (null == (e = n.useWakeLock) || e) {\n                    var t = $ee5c819c8591c8f0$var$h(function() {\n                        return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e) {\n                            v = e;\n                        });\n                    }, function() {});\n                    if (t && t.then) return t.then(function() {});\n                }\n            }();\n            return Promise.resolve(g && g.then ? g.then(o) : o());\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, t;\n}();\nfunction $ee5c819c8591c8f0$export$d6afbf68dbf63e6a(e, n, t) {\n    return void 0 === t && (t = \"https://api.elevenlabs.io\"), fetch(t + \"/v1/convai/conversations/\" + e + \"/feedback\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            feedback: n ? \"like\" : \"dislike\"\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\n\nconst $dad545c909cfec2d$var$startBtn = document.getElementById('startBtn');\nconst $dad545c909cfec2d$var$stopBtn = document.getElementById('stopBtn');\nconst $dad545c909cfec2d$var$statusEl = document.getElementById('status');\nlet $dad545c909cfec2d$var$conversationInstance = null;\nlet $dad545c909cfec2d$var$audio = null;\n// on page load: check for name and id parameters in url, then set the <span id=name> object\nconst $dad545c909cfec2d$var$urlParams = new URLSearchParams(window.location.search);\nlet $dad545c909cfec2d$var$config = {\n    name: $dad545c909cfec2d$var$urlParams.get('name'),\n    agentId: $dad545c909cfec2d$var$urlParams.get('id')\n};\n//try to load  a {name}.json from the server overwriting the whole config object\nif (!$dad545c909cfec2d$var$config.agentId) fetch(`agents/${$dad545c909cfec2d$var$config.name}.json`).then((response)=>response.json()).then((data)=>{\n    $dad545c909cfec2d$var$config = data;\n    console.log('Config loaded:', $dad545c909cfec2d$var$config);\n}).catch((error)=>{\n    console.error('Error loading config:', error);\n});\ndocument.getElementById('name').textContent = $dad545c909cfec2d$var$config.name;\nif (!$dad545c909cfec2d$var$config.agentId) {\n    document.getElementById('startBtn').disabled = true;\n    document.getElementById('startBtn').innerText = \"Agente n\\xe3o encontrado!\";\n}\n// Função para atualizar o status na interface\nconst $dad545c909cfec2d$var$updateStatus = (status)=>{\n    $dad545c909cfec2d$var$statusEl.textContent = \"Status: \" + status;\n};\n// Função para iniciar a conversa\nasync function $dad545c909cfec2d$var$startConversation() {\n    try {\n        // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n        await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        $dad545c909cfec2d$var$updateStatus('Microfone liberado');\n        //Play an mp3 file and wait for it to finish\n        if ($dad545c909cfec2d$var$config.startAudio) {\n            $dad545c909cfec2d$var$audio = new Audio($dad545c909cfec2d$var$config.startAudio);\n            $dad545c909cfec2d$var$audio.play();\n            await new Promise((resolve)=>{\n                $dad545c909cfec2d$var$audio.onended = resolve;\n            });\n        }\n        // Inicia a sessão de conversa com o agente\n        //Parse o ID do agente a partir da URL, parametro id\n        $dad545c909cfec2d$var$conversationInstance = await (0, $ee5c819c8591c8f0$export$8e86b22308382a1).startSession({\n            agentId: agentId,\n            // Callbacks opcionais:\n            onConnect: ()=>{\n                console.log('Conectado ao agente!');\n                $dad545c909cfec2d$var$updateStatus('Conectado');\n            },\n            onDisconnect: ()=>{\n                console.log(\"Conex\\xe3o encerrada.\");\n                $dad545c909cfec2d$var$updateStatus('Desconectado');\n            },\n            onMessage: (message)=>{\n                console.log('Mensagem recebida:', message);\n            // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n            },\n            onError: (error)=>{\n                console.error(\"Erro na sess\\xe3o:\", error);\n                $dad545c909cfec2d$var$updateStatus('Erro');\n            },\n            onStatusChange: (status)=>{\n                console.log('Status alterado:', status);\n            },\n            onModeChange: (mode)=>{\n                console.log('Modo alterado:', mode);\n            }\n        });\n        // Atualiza os botões na UI\n        $dad545c909cfec2d$var$startBtn.classList.add('hidden');\n        $dad545c909cfec2d$var$stopBtn.classList.remove('hidden');\n    } catch (error) {\n        console.error('Erro ao iniciar a conversa:', error);\n        $dad545c909cfec2d$var$updateStatus('Erro ao iniciar');\n    }\n}\n// Função para encerrar a conversa\nasync function $dad545c909cfec2d$var$endConversation() {\n    if ($dad545c909cfec2d$var$conversationInstance) {\n        await $dad545c909cfec2d$var$conversationInstance.endSession();\n        $dad545c909cfec2d$var$conversationInstance = null;\n    }\n    $dad545c909cfec2d$var$updateStatus('Desconectado');\n    $dad545c909cfec2d$var$startBtn.classList.remove('hidden');\n    $dad545c909cfec2d$var$stopBtn.classList.add('hidden');\n}\n// Eventos dos botões\n$dad545c909cfec2d$var$startBtn.addEventListener('click', $dad545c909cfec2d$var$startConversation);\n$dad545c909cfec2d$var$stopBtn.addEventListener('click', $dad545c909cfec2d$var$endConversation);\n\n\n//# sourceMappingURL=arapy-11labs.62918ebe.js.map\n"," // Importa o Conversation do pacote @11labs/client\n import { Conversation } from '@11labs/client';\n\n const startBtn = document.getElementById('startBtn');\n const stopBtn = document.getElementById('stopBtn');\n const statusEl = document.getElementById('status');\n let conversationInstance = null;\n let audio = null;\n\n// on page load: check for name and id parameters in url, then set the <span id=name> object\n\n\nconst urlParams = new URLSearchParams(window.location.search);\nlet config = {\n    name: urlParams.get('name'),\n    agentId: urlParams.get('id'),\n}\n\n//try to load  a {name}.json from the server overwriting the whole config object\n\nif (!config.agentId) {\n  fetch(`agents/${config.name}.json`)\n      .then(response => response.json())\n      .then(data => {\n          config = data;\n          console.log('Config loaded:', config);\n      })\n      .catch(error => {\n          console.error('Error loading config:', error);\n      });\n  }\n\ndocument.getElementById('name').textContent = config.name;\n\nif (!config.agentId) {\n    document.getElementById('startBtn').disabled = true;\n    document.getElementById('startBtn').innerText = \"Agente não encontrado!\";\n}\n\n // Função para atualizar o status na interface\n const updateStatus = (status) => {\n   statusEl.textContent = \"Status: \" + status;\n };\n\n // Função para iniciar a conversa\n async function startConversation() {\n   try {\n     // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n     await navigator.mediaDevices.getUserMedia({ audio: true });\n     updateStatus('Microfone liberado');\n\n    //Play an mp3 file and wait for it to finish\n      if (config.startAudio) {\n        audio = new Audio(config.startAudio);\n        audio.play();\n        await new Promise((resolve) => {\n          audio.onended = resolve;\n        });  \n      }\n      \n     // Inicia a sessão de conversa com o agente\n     //Parse o ID do agente a partir da URL, parametro id\n     conversationInstance = await Conversation.startSession({\n       agentId: agentId,\n       // Callbacks opcionais:\n       onConnect: () => {\n         console.log('Conectado ao agente!');\n         updateStatus('Conectado');\n       },\n       onDisconnect: () => {\n         console.log('Conexão encerrada.');\n         updateStatus('Desconectado');\n       },\n       onMessage: (message) => {\n         console.log('Mensagem recebida:', message);\n         // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n       },\n       onError: (error) => {\n         console.error('Erro na sessão:', error);\n         updateStatus('Erro');\n       },\n       onStatusChange: (status) => {\n         console.log('Status alterado:', status);\n       },\n       onModeChange: (mode) => {\n         console.log('Modo alterado:', mode);\n       },\n     });\n\n     // Atualiza os botões na UI\n     startBtn.classList.add('hidden');\n     stopBtn.classList.remove('hidden');\n\n   } catch (error) {\n     console.error('Erro ao iniciar a conversa:', error);\n     updateStatus('Erro ao iniciar');\n   }\n }\n\n // Função para encerrar a conversa\n async function endConversation() {\n   if (conversationInstance) {\n     await conversationInstance.endSession();\n     conversationInstance = null;\n   }\n   updateStatus('Desconectado');\n   startBtn.classList.remove('hidden');\n   stopBtn.classList.add('hidden');\n }\n\n // Eventos dos botões\n startBtn.addEventListener('click', startConversation);\n stopBtn.addEventListener('click', endConversation);","function e(){return e=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)({}).hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},e.apply(null,arguments)}function n(e){for(var n=window.atob(e),t=n.length,o=new Uint8Array(t),r=0;r<t;r++)o[r]=n.charCodeAt(r);return o.buffer}var t=new Blob(['\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '],{type:\"application/javascript\"}),o=URL.createObjectURL(t);function r(){return[\"iPad Simulator\",\"iPhone Simulator\",\"iPod Simulator\",\"iPad\",\"iPhone\",\"iPod\"].includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"ontouchend\"in document}var i=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=n,this.worklet=t,this.inputStream=o}e.create=function(n){var t=n.sampleRate,i=n.format,a=n.preferHeadphonesForIosDevices;try{var s=null,u=null;return Promise.resolve(function(n,c){try{var l=function(){function n(){function n(){return Promise.resolve(s.audioWorklet.addModule(o)).then(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:c})).then(function(n){var o=s.createMediaStreamSource(u=n),r=new AudioWorkletNode(s,\"raw-audio-processor\");return r.port.postMessage({type:\"setFormat\",format:i,sampleRate:t}),o.connect(a),a.connect(r),Promise.resolve(s.resume()).then(function(){return new e(s,a,r,u)})})})}var r=navigator.mediaDevices.getSupportedConstraints().sampleRate,a=(s=new window.AudioContext(r?{sampleRate:t}:{})).createAnalyser(),l=function(){if(!r)return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function(){})}();return l&&l.then?l.then(n):n()}var c={sampleRate:{ideal:t},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}},l=function(){if(r()&&a)return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e){var n=e.find(function(e){return\"audioinput\"===e.kind&&[\"airpod\",\"headphone\",\"earphone\"].find(function(n){return e.label.toLowerCase().includes(n)})});n&&(c.deviceId={ideal:n.deviceId})})}();return l&&l.then?l.then(n):n()}()}catch(e){return c(e)}return l&&l.then?l.then(void 0,c):l}(0,function(e){var n,t;throw null==(n=u)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=s)||t.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){try{return this.inputStream.getTracks().forEach(function(e){return e.stop()}),Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},n.setMuted=function(e){this.worklet.port.postMessage({type:\"setMuted\",isMuted:e})},e}(),a=new Blob(['\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '],{type:\"application/javascript\"}),s=URL.createObjectURL(a),u=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=n,this.gain=t,this.worklet=o}return e.create=function(n){var t=n.sampleRate,o=n.format;try{var r=null;return Promise.resolve(function(n,i){try{var a=(u=(r=new AudioContext({sampleRate:t})).createAnalyser(),(c=r.createGain()).connect(u),u.connect(r.destination),Promise.resolve(r.audioWorklet.addModule(s)).then(function(){var n=new AudioWorkletNode(r,\"audio-concat-processor\");return n.port.postMessage({type:\"setFormat\",format:o}),n.connect(c),Promise.resolve(r.resume()).then(function(){return new e(r,u,c,n)})}))}catch(e){return i(e)}var u,c;return a&&a.then?a.then(void 0,i):a}(0,function(e){var n;throw null==(n=r)||n.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}();function c(e){return!!e.type}var l=/*#__PURE__*/function(){function e(e,n,t,o){var r=this;this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.socket=e,this.conversationId=n,this.inputFormat=t,this.outputFormat=o,this.socket.addEventListener(\"error\",function(e){setTimeout(function(){return r.disconnect({reason:\"error\",message:\"The connection was closed due to a socket error.\",context:e})},0)}),this.socket.addEventListener(\"close\",function(e){r.disconnect(1e3===e.code?{reason:\"agent\",context:e}:{reason:\"error\",message:e.reason||\"The connection was closed by the server.\",context:e})}),this.socket.addEventListener(\"message\",function(e){try{var n=JSON.parse(e.data);if(!c(n))return;r.onMessageCallback?r.onMessageCallback(n):r.queue.push(n)}catch(e){}})}e.create=function(n){try{var t=null;return Promise.resolve(function(o,r){try{var i=(s=null!=(a=n.origin)?a:\"wss://api.elevenlabs.io\",u=n.signedUrl?n.signedUrl:s+\"/v1/convai/conversation?agent_id=\"+n.agentId,l=[\"convai\"],n.authorization&&l.push(\"bearer.\"+n.authorization),t=new WebSocket(u,l),Promise.resolve(new Promise(function(e,o){t.addEventListener(\"open\",function(){var e,o,r,i,a,s={type:\"conversation_initiation_client_data\"};n.overrides&&(s.conversation_config_override={agent:{prompt:null==(o=n.overrides.agent)?void 0:o.prompt,first_message:null==(r=n.overrides.agent)?void 0:r.firstMessage,language:null==(i=n.overrides.agent)?void 0:i.language},tts:{voice_id:null==(a=n.overrides.tts)?void 0:a.voiceId}}),n.customLlmExtraBody&&(s.custom_llm_extra_body=n.customLlmExtraBody),n.dynamicVariables&&(s.dynamic_variables=n.dynamicVariables),null==(e=t)||e.send(JSON.stringify(s))},{once:!0}),t.addEventListener(\"error\",function(e){setTimeout(function(){return o(e)},0)}),t.addEventListener(\"close\",o),t.addEventListener(\"message\",function(n){var t=JSON.parse(n.data);c(t)&&(\"conversation_initiation_metadata\"===t.type?e(t.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})})).then(function(n){var o=n.conversation_id,r=n.agent_output_audio_format,i=n.user_input_audio_format,a=d(null!=i?i:\"pcm_16000\"),s=d(r);return new e(t,o,a,s)}))}catch(e){return r(e)}var a,s,u,l;return i&&i.then?i.then(void 0,r):i}(0,function(e){var n;throw null==(n=t)||n.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){this.socket.close()},n.sendMessage=function(e){this.socket.send(JSON.stringify(e))},n.onMessage=function(e){this.onMessageCallback=e,this.queue.forEach(e),this.queue=[]},n.onDisconnect=function(e){this.onDisconnectCallback=e,this.disconnectionDetails&&e(this.disconnectionDetails)},n.disconnect=function(e){var n;this.disconnectionDetails||(this.disconnectionDetails=e,null==(n=this.onDisconnectCallback)||n.call(this,e))},e}();function d(e){var n=e.split(\"_\"),t=n[0],o=n[1];if(![\"pcm\",\"ulaw\"].includes(t))throw new Error(\"Invalid format: \"+e);var r=parseInt(o);if(isNaN(r))throw new Error(\"Invalid sample rate: \"+o);return{format:t,sampleRate:r}}function h(e,n){try{var t=e()}catch(e){return n(e)}return t&&t.then?t.then(void 0,n):t}var p={clientTools:{}},f={onConnect:function(){},onDebug:function(){},onDisconnect:function(){},onError:function(){},onMessage:function(){},onAudio:function(){},onModeChange:function(){},onStatusChange:function(){},onCanSendFeedbackChange:function(){}},m=/*#__PURE__*/function(){function t(e,t,o,r,i){var a=this,s=this,u=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.wakeLock=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSession=function(){return u.endSessionWithDetails({reason:\"user\"})},this.endSessionWithDetails=function(e){try{var n=function(){return a.connection.close(),Promise.resolve(a.input.close()).then(function(){return Promise.resolve(a.output.close()).then(function(){a.updateStatus(\"disconnected\"),a.options.onDisconnect(e)})})};if(\"connected\"!==a.status&&\"connecting\"!==a.status)return Promise.resolve();a.updateStatus(\"disconnecting\");var t=h(function(){var e;return Promise.resolve(null==(e=a.wakeLock)?void 0:e.release()).then(function(){a.wakeLock=null})},function(){});return Promise.resolve(t&&t.then?t.then(n):n())}catch(e){return Promise.reject(e)}},this.updateMode=function(e){e!==u.mode&&(u.mode=e,u.options.onModeChange({mode:e}))},this.updateStatus=function(e){e!==u.status&&(u.status=e,u.options.onStatusChange({status:e}))},this.updateCanSendFeedback=function(){var e=u.currentEventId!==u.lastFeedbackEventId;u.canSendFeedback!==e&&(u.canSendFeedback=e,u.options.onCanSendFeedbackChange({canSendFeedback:e}))},this.onMessage=function(e){try{switch(e.type){case\"interruption\":return e.interruption_event&&(s.lastInterruptTimestamp=e.interruption_event.event_id),s.fadeOutAudio(),Promise.resolve();case\"agent_response\":return s.options.onMessage({source:\"ai\",message:e.agent_response_event.agent_response}),Promise.resolve();case\"user_transcript\":return s.options.onMessage({source:\"user\",message:e.user_transcription_event.user_transcript}),Promise.resolve();case\"internal_tentative_agent_response\":return s.options.onDebug({type:\"tentative_agent_response\",response:e.tentative_agent_response_internal_event.tentative_agent_response}),Promise.resolve();case\"client_tool_call\":return Promise.resolve(function(){if(s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)){var n=h(function(){return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n){var t=\"object\"==typeof n?JSON.stringify(n):String(n);s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:t,is_error:!1})})},function(n){s.onError(\"Client tool execution failed with following error: \"+(null==n?void 0:n.message),{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool execution failed: \"+(null==n?void 0:n.message),is_error:!0})});if(n&&n.then)return n.then(function(){})}else{if(s.options.onUnhandledClientToolCall)return void s.options.onUnhandledClientToolCall(e.client_tool_call);s.onError(\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",is_error:!0})}}());case\"audio\":return s.lastInterruptTimestamp<=e.audio_event.event_id&&(s.options.onAudio(e.audio_event.audio_base_64),s.addAudioBase64Chunk(e.audio_event.audio_base_64),s.currentEventId=e.audio_event.event_id,s.updateCanSendFeedback(),s.updateMode(\"speaking\")),Promise.resolve();case\"ping\":return s.connection.sendMessage({type:\"pong\",event_id:e.ping_event.event_id}),Promise.resolve();default:return s.options.onDebug(e),Promise.resolve()}}catch(e){return Promise.reject(e)}},this.onInputWorkletMessage=function(e){var n,t;\"connected\"===u.status&&u.connection.sendMessage({user_audio_chunk:(n=e.data[0].buffer,t=new Uint8Array(n),window.btoa(String.fromCharCode.apply(String,t)))})},this.onOutputWorkletMessage=function(e){var n=e.data;\"process\"===n.type&&u.updateMode(n.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=function(e){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"}),u.output.worklet.port.postMessage({type:\"buffer\",buffer:n(e)})},this.fadeOutAudio=function(){u.updateMode(\"listening\"),u.output.worklet.port.postMessage({type:\"interrupt\"}),u.output.gain.gain.exponentialRampToValueAtTime(1e-4,u.output.context.currentTime+2),setTimeout(function(){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.onError=function(e,n){console.error(e,n),u.options.onError(e,n)},this.calculateVolume=function(e){if(0===e.length)return 0;for(var n=0,t=0;t<e.length;t++)n+=e[t]/255;return(n/=e.length)<0?0:n>1?1:n},this.getId=function(){return u.connection.conversationId},this.isOpen=function(){return\"connected\"===u.status},this.setVolume=function(e){u.volume=e.volume},this.setMicMuted=function(e){u.input.setMuted(e)},this.getInputByteFrequencyData=function(){return null!=u.inputFrequencyData||(u.inputFrequencyData=new Uint8Array(u.input.analyser.frequencyBinCount)),u.input.analyser.getByteFrequencyData(u.inputFrequencyData),u.inputFrequencyData},this.getOutputByteFrequencyData=function(){return null!=u.outputFrequencyData||(u.outputFrequencyData=new Uint8Array(u.output.analyser.frequencyBinCount)),u.output.analyser.getByteFrequencyData(u.outputFrequencyData),u.outputFrequencyData},this.getInputVolume=function(){return u.calculateVolume(u.getInputByteFrequencyData())},this.getOutputVolume=function(){return u.calculateVolume(u.getOutputByteFrequencyData())},this.sendFeedback=function(e){u.canSendFeedback?(u.connection.sendMessage({type:\"feedback\",score:e?\"like\":\"dislike\",event_id:u.currentEventId}),u.lastFeedbackEventId=u.currentEventId,u.updateCanSendFeedback()):console.warn(0===u.lastFeedbackEventId?\"Cannot send feedback: the conversation has not started yet.\":\"Cannot send feedback: feedback has already been sent for the current response.\")},this.sendContextualUpdate=function(e){u.connection.sendMessage({type:\"contextual_update\",text:e})},this.options=e,this.connection=t,this.input=o,this.output=r,this.wakeLock=i,this.options.onConnect({conversationId:t.conversationId}),this.connection.onDisconnect(this.endSessionWithDetails),this.connection.onMessage(this.onMessage),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}return t.startSession=function(n){try{var o=function(){return h(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:!0})).then(function(o){var h;function p(){return Promise.resolve(l.create(n)).then(function(o){return c=o,Promise.resolve(Promise.all([i.create(e({},c.inputFormat,{preferHeadphonesForIosDevices:n.preferHeadphonesForIosDevices})),u.create(c.outputFormat)])).then(function(e){var n;return s=e[0],d=e[1],null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),m=null,new t(a,c,s,d,v)})})}m=o;var f,g=null!=(h=n.connectionDelay)?h:{default:0,android:3e3},y=g.default;if(/android/i.test(navigator.userAgent))y=null!=(f=g.android)?f:y;else if(r()){var _;y=null!=(_=g.ios)?_:y}var b=function(){if(y>0)return Promise.resolve(new Promise(function(e){return setTimeout(e,y)})).then(function(){})}();return b&&b.then?b.then(p):p()})},function(e){var n,t,o;return a.onStatusChange({status:\"disconnected\"}),null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=c)||t.close(),Promise.resolve(null==(o=s)?void 0:o.close()).then(function(){var n;return Promise.resolve(null==(n=d)?void 0:n.close()).then(function(){function n(){throw e}var t=h(function(){var e;return Promise.resolve(null==(e=v)?void 0:e.release()).then(function(){v=null})},function(){});return t&&t.then?t.then(n):n()})})})},a=e({},p,f,n);a.onStatusChange({status:\"connecting\"}),a.onCanSendFeedbackChange({canSendFeedback:!1});var s=null,c=null,d=null,m=null,v=null,g=function(e){if(null==(e=n.useWakeLock)||e){var t=h(function(){return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e){v=e})},function(){});if(t&&t.then)return t.then(function(){})}}();return Promise.resolve(g&&g.then?g.then(o):o())}catch(e){return Promise.reject(e)}},t}();function v(e,n,t){return void 0===t&&(t=\"https://api.elevenlabs.io\"),fetch(t+\"/v1/convai/conversations/\"+e+\"/feedback\",{method:\"POST\",body:JSON.stringify({feedback:n?\"like\":\"dislike\"}),headers:{\"Content-Type\":\"application/json\"}})}export{m as Conversation,v as postOverallFeedback};\n//# sourceMappingURL=lib.module.js.map\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output, wakeLock);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult =\n              typeof result === \"object\"\n                ? JSON.stringify(result)\n                : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            return;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64);\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n\n  public sendContextualUpdate = (text: string) => {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["$ee5c819c8591c8f0$var$e","Object","assign","bind","e","n","arguments","length","t","o","hasOwnProperty","call","apply","$ee5c819c8591c8f0$var$t","Blob","type","$ee5c819c8591c8f0$var$o","URL","createObjectURL","$ee5c819c8591c8f0$var$r","includes","navigator","platform","userAgent","document","$ee5c819c8591c8f0$var$i","context","analyser","worklet","inputStream","create","sampleRate","i","format","a","preferHeadphonesForIosDevices","s","u","Promise","resolve","c","l","audioWorklet","addModule","then","mediaDevices","getUserMedia","audio","createMediaStreamSource","r","AudioWorkletNode","port","postMessage","connect","resume","getSupportedConstraints","window","AudioContext","createAnalyser","ideal","echoCancellation","noiseSuppression","enumerateDevices","find","kind","label","toLowerCase","deviceId","getTracks","forEach","stop","close","reject","prototype","setMuted","isMuted","$ee5c819c8591c8f0$var$a","$ee5c819c8591c8f0$var$s","$ee5c819c8591c8f0$var$u","gain","createGain","destination","$ee5c819c8591c8f0$var$l","socket","conversationId","inputFormat","outputFormat","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","JSON","parse","data","push","origin","signedUrl","agentId","authorization","WebSocket","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","$ee5c819c8591c8f0$var$c","conversation_initiation_metadata_event","console","warn","conversation_id","agent_output_audio_format","user_input_audio_format","$ee5c819c8591c8f0$var$d","sendMessage","onMessage","onDisconnect","split","Error","parseInt","isNaN","$ee5c819c8591c8f0$var$h","$ee5c819c8591c8f0$var$p","clientTools","$ee5c819c8591c8f0$var$f","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","$ee5c819c8591c8f0$export$8e86b22308382a1","options","connection","input","output","wakeLock","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","release","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","source","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","client_tool_call","tool_name","parameters","String","tool_call_id","result","is_error","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","user_audio_chunk","Uint8Array","buffer","btoa","fromCharCode","onOutputWorkletMessage","finished","value","$ee5c819c8591c8f0$var$n","atob","charCodeAt","exponentialRampToValueAtTime","currentTime","error","calculateVolume","getId","isOpen","setVolume","setMicMuted","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","score","sendContextualUpdate","text","onmessage","startSession","p","all","d","m","v","_","h","f","g","connectionDelay","default","android","y","test","ios","b","useWakeLock","request","$dad545c909cfec2d$var$startBtn","getElementById","$dad545c909cfec2d$var$stopBtn","$dad545c909cfec2d$var$statusEl","$dad545c909cfec2d$var$conversationInstance","$dad545c909cfec2d$var$audio","$dad545c909cfec2d$var$urlParams","URLSearchParams","location","search","$dad545c909cfec2d$var$config","name","get","fetch","json","log","catch","textContent","disabled","innerText","$dad545c909cfec2d$var$updateStatus","$dad545c909cfec2d$var$startConversation","startAudio","Audio","play","onended","classList","add","remove","$dad545c909cfec2d$var$endConversation","base64ToArrayBuffer","base64","binaryString","len","bytes","blob","rawAudioProcessor","isIosDevice","Input","this","_ref","_temp4","_temp2","_navigator$mediaDevic","supportsSampleRateConstraint","_temp","_temp3","availableDevices","idealDevice","keyword","_catch","_inputStream","_context","track","_proto","audioConcatProcessor","Output","isValidSocketEvent","event","Connection","_this","parsedEvent","config","_config$origin","url","protocols","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","conversationConfig","parseFormat","_socket2","callback","details","_this$onDisconnectCal","_format$split","formatPart","sampleRatePart","defaultClientTools","defaultCallbacks","Conversation","_this2","_this3","_this2$wakeLock","formattedResult","chunk","frequencyData","_ref2","_this$outputFrequency","like","_temp10","_options$connectionDe","_temp6","_Connection$create","_extends","_Promise$all","_preliminaryInputStre","preliminaryInputStream","fullOptions","_delayConfig$android","delayConfig","delay","_delayConfig$ios","_temp5","_preliminaryInputStre2","_connection","_input","_output","_temp8","_temp7","_wakeLock","_temp9","_options$useWakeLock","_navigator$wakeLock$r","postOverallFeedback","method","body","feedback","headers"],"version":3,"file":"arapy-11labs.62918ebe.js.map"}