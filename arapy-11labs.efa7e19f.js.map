{"mappings":"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","sources":["<anon>","index.js","node_modules/@11labs/client/dist/lib.module.js","node_modules/@11labs/client/src/utils/audio.ts","node_modules/@11labs/client/src/utils/rawAudioProcessor.ts","node_modules/@11labs/client/src/utils/compatibility.ts","node_modules/@11labs/client/src/utils/input.ts","node_modules/@11labs/client/src/utils/audioConcatProcessor.ts","node_modules/@11labs/client/src/utils/output.ts","node_modules/@11labs/client/src/utils/events.ts","node_modules/@11labs/client/src/utils/connection.ts","node_modules/@11labs/client/src/index.ts","visualizer.js","visualizers/registry.js","visualizers/lineVisualizer.js","visualizers/imageVisualizer.js"],"sourcesContent":["// Importa o Conversation do pacote @11labs/client\nfunction $ee5c819c8591c8f0$var$e() {\n    return $ee5c819c8591c8f0$var$e = Object.assign ? Object.assign.bind() : function(e) {\n        for(var n = 1; n < arguments.length; n++){\n            var t = arguments[n];\n            for(var o in t)({}).hasOwnProperty.call(t, o) && (e[o] = t[o]);\n        }\n        return e;\n    }, $ee5c819c8591c8f0$var$e.apply(null, arguments);\n}\nfunction $ee5c819c8591c8f0$var$n(e) {\n    for(var n = window.atob(e), t = n.length, o = new Uint8Array(t), r = 0; r < t; r++)o[r] = n.charCodeAt(r);\n    return o.buffer;\n}\nvar $ee5c819c8591c8f0$var$t = new Blob([\n    '\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$o = URL.createObjectURL($ee5c819c8591c8f0$var$t);\nfunction $ee5c819c8591c8f0$var$r() {\n    return [\n        \"iPad Simulator\",\n        \"iPhone Simulator\",\n        \"iPod Simulator\",\n        \"iPad\",\n        \"iPhone\",\n        \"iPod\"\n    ].includes(navigator.platform) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nvar $ee5c819c8591c8f0$var$i = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e, this.analyser = n, this.worklet = t, this.inputStream = o;\n    }\n    e.create = function(n) {\n        var t = n.sampleRate, i = n.format, a = n.preferHeadphonesForIosDevices;\n        try {\n            var s = null, u = null;\n            return Promise.resolve(function(n, c) {\n                try {\n                    var l = function() {\n                        function n() {\n                            function n() {\n                                return Promise.resolve(s.audioWorklet.addModule($ee5c819c8591c8f0$var$o)).then(function() {\n                                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                                        audio: c\n                                    })).then(function(n) {\n                                        var o = s.createMediaStreamSource(u = n), r = new AudioWorkletNode(s, \"raw-audio-processor\");\n                                        return r.port.postMessage({\n                                            type: \"setFormat\",\n                                            format: i,\n                                            sampleRate: t\n                                        }), o.connect(a), a.connect(r), Promise.resolve(s.resume()).then(function() {\n                                            return new e(s, a, r, u);\n                                        });\n                                    });\n                                });\n                            }\n                            var r = navigator.mediaDevices.getSupportedConstraints().sampleRate, a = (s = new window.AudioContext(r ? {\n                                sampleRate: t\n                            } : {})).createAnalyser(), l = function() {\n                                if (!r) return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function() {});\n                            }();\n                            return l && l.then ? l.then(n) : n();\n                        }\n                        var c = {\n                            sampleRate: {\n                                ideal: t\n                            },\n                            echoCancellation: {\n                                ideal: !0\n                            },\n                            noiseSuppression: {\n                                ideal: !0\n                            }\n                        }, l = function() {\n                            if ($ee5c819c8591c8f0$var$r() && a) return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e) {\n                                var n = e.find(function(e) {\n                                    return \"audioinput\" === e.kind && [\n                                        \"airpod\",\n                                        \"headphone\",\n                                        \"earphone\"\n                                    ].find(function(n) {\n                                        return e.label.toLowerCase().includes(n);\n                                    });\n                                });\n                                n && (c.deviceId = {\n                                    ideal: n.deviceId\n                                });\n                            });\n                        }();\n                        return l && l.then ? l.then(n) : n();\n                    }();\n                } catch (e) {\n                    return c(e);\n                }\n                return l && l.then ? l.then(void 0, c) : l;\n            }(0, function(e) {\n                var n, t;\n                throw null == (n = u) || n.getTracks().forEach(function(e) {\n                    return e.stop();\n                }), null == (t = s) || t.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        try {\n            return this.inputStream.getTracks().forEach(function(e) {\n                return e.stop();\n            }), Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, n.setMuted = function(e) {\n        this.worklet.port.postMessage({\n            type: \"setMuted\",\n            isMuted: e\n        });\n    }, e;\n}(), $ee5c819c8591c8f0$var$a = new Blob([\n    '\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$s = URL.createObjectURL($ee5c819c8591c8f0$var$a), $ee5c819c8591c8f0$var$u = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e, this.analyser = n, this.gain = t, this.worklet = o;\n    }\n    return e.create = function(n) {\n        var t = n.sampleRate, o = n.format;\n        try {\n            var r = null;\n            return Promise.resolve(function(n, i) {\n                try {\n                    var a = (u = (r = new AudioContext({\n                        sampleRate: t\n                    })).createAnalyser(), (c = r.createGain()).connect(u), u.connect(r.destination), Promise.resolve(r.audioWorklet.addModule($ee5c819c8591c8f0$var$s)).then(function() {\n                        var n = new AudioWorkletNode(r, \"audio-concat-processor\");\n                        return n.port.postMessage({\n                            type: \"setFormat\",\n                            format: o\n                        }), n.connect(c), Promise.resolve(r.resume()).then(function() {\n                            return new e(r, u, c, n);\n                        });\n                    }));\n                } catch (e) {\n                    return i(e);\n                }\n                var u, c;\n                return a && a.then ? a.then(void 0, i) : a;\n            }(0, function(e) {\n                var n;\n                throw null == (n = r) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        try {\n            return Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$c(e) {\n    return !!e.type;\n}\nvar $ee5c819c8591c8f0$var$l = /*#__PURE__*/ function() {\n    function e(e, n, t, o) {\n        var r = this;\n        this.socket = void 0, this.conversationId = void 0, this.inputFormat = void 0, this.outputFormat = void 0, this.queue = [], this.disconnectionDetails = null, this.onDisconnectCallback = null, this.onMessageCallback = null, this.socket = e, this.conversationId = n, this.inputFormat = t, this.outputFormat = o, this.socket.addEventListener(\"error\", function(e) {\n            setTimeout(function() {\n                return r.disconnect({\n                    reason: \"error\",\n                    message: \"The connection was closed due to a socket error.\",\n                    context: e\n                });\n            }, 0);\n        }), this.socket.addEventListener(\"close\", function(e) {\n            r.disconnect(1e3 === e.code ? {\n                reason: \"agent\",\n                context: e\n            } : {\n                reason: \"error\",\n                message: e.reason || \"The connection was closed by the server.\",\n                context: e\n            });\n        }), this.socket.addEventListener(\"message\", function(e) {\n            try {\n                var n = JSON.parse(e.data);\n                if (!$ee5c819c8591c8f0$var$c(n)) return;\n                r.onMessageCallback ? r.onMessageCallback(n) : r.queue.push(n);\n            } catch (e) {}\n        });\n    }\n    e.create = function(n) {\n        try {\n            var t = null;\n            return Promise.resolve(function(o, r) {\n                try {\n                    var i = (s = null != (a = n.origin) ? a : \"wss://api.elevenlabs.io\", u = n.signedUrl ? n.signedUrl : s + \"/v1/convai/conversation?agent_id=\" + n.agentId, l = [\n                        \"convai\"\n                    ], n.authorization && l.push(\"bearer.\" + n.authorization), t = new WebSocket(u, l), Promise.resolve(new Promise(function(e, o) {\n                        t.addEventListener(\"open\", function() {\n                            var e, o, r, i, a, s = {\n                                type: \"conversation_initiation_client_data\"\n                            };\n                            n.overrides && (s.conversation_config_override = {\n                                agent: {\n                                    prompt: null == (o = n.overrides.agent) ? void 0 : o.prompt,\n                                    first_message: null == (r = n.overrides.agent) ? void 0 : r.firstMessage,\n                                    language: null == (i = n.overrides.agent) ? void 0 : i.language\n                                },\n                                tts: {\n                                    voice_id: null == (a = n.overrides.tts) ? void 0 : a.voiceId\n                                }\n                            }), n.customLlmExtraBody && (s.custom_llm_extra_body = n.customLlmExtraBody), n.dynamicVariables && (s.dynamic_variables = n.dynamicVariables), null == (e = t) || e.send(JSON.stringify(s));\n                        }, {\n                            once: !0\n                        }), t.addEventListener(\"error\", function(e) {\n                            setTimeout(function() {\n                                return o(e);\n                            }, 0);\n                        }), t.addEventListener(\"close\", o), t.addEventListener(\"message\", function(n) {\n                            var t = JSON.parse(n.data);\n                            $ee5c819c8591c8f0$var$c(t) && (\"conversation_initiation_metadata\" === t.type ? e(t.conversation_initiation_metadata_event) : console.warn(\"First received message is not conversation metadata.\"));\n                        }, {\n                            once: !0\n                        });\n                    })).then(function(n) {\n                        var o = n.conversation_id, r = n.agent_output_audio_format, i = n.user_input_audio_format, a = $ee5c819c8591c8f0$var$d(null != i ? i : \"pcm_16000\"), s = $ee5c819c8591c8f0$var$d(r);\n                        return new e(t, o, a, s);\n                    }));\n                } catch (e) {\n                    return r(e);\n                }\n                var a, s, u, l;\n                return i && i.then ? i.then(void 0, r) : i;\n            }(0, function(e) {\n                var n;\n                throw null == (n = t) || n.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var n = e.prototype;\n    return n.close = function() {\n        this.socket.close();\n    }, n.sendMessage = function(e) {\n        this.socket.send(JSON.stringify(e));\n    }, n.onMessage = function(e) {\n        this.onMessageCallback = e, this.queue.forEach(e), this.queue = [];\n    }, n.onDisconnect = function(e) {\n        this.onDisconnectCallback = e, this.disconnectionDetails && e(this.disconnectionDetails);\n    }, n.disconnect = function(e) {\n        var n;\n        this.disconnectionDetails || (this.disconnectionDetails = e, null == (n = this.onDisconnectCallback) || n.call(this, e));\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$d(e) {\n    var n = e.split(\"_\"), t = n[0], o = n[1];\n    if (![\n        \"pcm\",\n        \"ulaw\"\n    ].includes(t)) throw new Error(\"Invalid format: \" + e);\n    var r = parseInt(o);\n    if (isNaN(r)) throw new Error(\"Invalid sample rate: \" + o);\n    return {\n        format: t,\n        sampleRate: r\n    };\n}\nfunction $ee5c819c8591c8f0$var$h(e, n) {\n    try {\n        var t = e();\n    } catch (e) {\n        return n(e);\n    }\n    return t && t.then ? t.then(void 0, n) : t;\n}\nvar $ee5c819c8591c8f0$var$p = {\n    clientTools: {}\n}, $ee5c819c8591c8f0$var$f = {\n    onConnect: function() {},\n    onDebug: function() {},\n    onDisconnect: function() {},\n    onError: function() {},\n    onMessage: function() {},\n    onAudio: function() {},\n    onModeChange: function() {},\n    onStatusChange: function() {},\n    onCanSendFeedbackChange: function() {}\n}, $ee5c819c8591c8f0$export$8e86b22308382a1 = /*#__PURE__*/ function() {\n    function t(e, t, o, r, i) {\n        var a = this, s = this, u = this;\n        this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.wakeLock = void 0, this.lastInterruptTimestamp = 0, this.mode = \"listening\", this.status = \"connecting\", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.currentEventId = 1, this.lastFeedbackEventId = 1, this.canSendFeedback = !1, this.endSession = function() {\n            return u.endSessionWithDetails({\n                reason: \"user\"\n            });\n        }, this.endSessionWithDetails = function(e) {\n            try {\n                var n = function() {\n                    return a.connection.close(), Promise.resolve(a.input.close()).then(function() {\n                        return Promise.resolve(a.output.close()).then(function() {\n                            a.updateStatus(\"disconnected\"), a.options.onDisconnect(e);\n                        });\n                    });\n                };\n                if (\"connected\" !== a.status && \"connecting\" !== a.status) return Promise.resolve();\n                a.updateStatus(\"disconnecting\");\n                var t = $ee5c819c8591c8f0$var$h(function() {\n                    var e;\n                    return Promise.resolve(null == (e = a.wakeLock) ? void 0 : e.release()).then(function() {\n                        a.wakeLock = null;\n                    });\n                }, function() {});\n                return Promise.resolve(t && t.then ? t.then(n) : n());\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.updateMode = function(e) {\n            e !== u.mode && (u.mode = e, u.options.onModeChange({\n                mode: e\n            }));\n        }, this.updateStatus = function(e) {\n            e !== u.status && (u.status = e, u.options.onStatusChange({\n                status: e\n            }));\n        }, this.updateCanSendFeedback = function() {\n            var e = u.currentEventId !== u.lastFeedbackEventId;\n            u.canSendFeedback !== e && (u.canSendFeedback = e, u.options.onCanSendFeedbackChange({\n                canSendFeedback: e\n            }));\n        }, this.onMessage = function(e) {\n            try {\n                switch(e.type){\n                    case \"interruption\":\n                        return e.interruption_event && (s.lastInterruptTimestamp = e.interruption_event.event_id), s.fadeOutAudio(), Promise.resolve();\n                    case \"agent_response\":\n                        return s.options.onMessage({\n                            source: \"ai\",\n                            message: e.agent_response_event.agent_response\n                        }), Promise.resolve();\n                    case \"user_transcript\":\n                        return s.options.onMessage({\n                            source: \"user\",\n                            message: e.user_transcription_event.user_transcript\n                        }), Promise.resolve();\n                    case \"internal_tentative_agent_response\":\n                        return s.options.onDebug({\n                            type: \"tentative_agent_response\",\n                            response: e.tentative_agent_response_internal_event.tentative_agent_response\n                        }), Promise.resolve();\n                    case \"client_tool_call\":\n                        return Promise.resolve(function() {\n                            if (s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)) {\n                                var n = $ee5c819c8591c8f0$var$h(function() {\n                                    return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n) {\n                                        var t = \"object\" == typeof n ? JSON.stringify(n) : String(n);\n                                        s.connection.sendMessage({\n                                            type: \"client_tool_result\",\n                                            tool_call_id: e.client_tool_call.tool_call_id,\n                                            result: t,\n                                            is_error: !1\n                                        });\n                                    });\n                                }, function(n) {\n                                    s.onError(\"Client tool execution failed with following error: \" + (null == n ? void 0 : n.message), {\n                                        clientToolName: e.client_tool_call.tool_name\n                                    }), s.connection.sendMessage({\n                                        type: \"client_tool_result\",\n                                        tool_call_id: e.client_tool_call.tool_call_id,\n                                        result: \"Client tool execution failed: \" + (null == n ? void 0 : n.message),\n                                        is_error: !0\n                                    });\n                                });\n                                if (n && n.then) return n.then(function() {});\n                            } else {\n                                if (s.options.onUnhandledClientToolCall) return void s.options.onUnhandledClientToolCall(e.client_tool_call);\n                                s.onError(\"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\", {\n                                    clientToolName: e.client_tool_call.tool_name\n                                }), s.connection.sendMessage({\n                                    type: \"client_tool_result\",\n                                    tool_call_id: e.client_tool_call.tool_call_id,\n                                    result: \"Client tool with name \" + e.client_tool_call.tool_name + \" is not defined on client\",\n                                    is_error: !0\n                                });\n                            }\n                        }());\n                    case \"audio\":\n                        return s.lastInterruptTimestamp <= e.audio_event.event_id && (s.options.onAudio(e.audio_event.audio_base_64), s.addAudioBase64Chunk(e.audio_event.audio_base_64), s.currentEventId = e.audio_event.event_id, s.updateCanSendFeedback(), s.updateMode(\"speaking\")), Promise.resolve();\n                    case \"ping\":\n                        return s.connection.sendMessage({\n                            type: \"pong\",\n                            event_id: e.ping_event.event_id\n                        }), Promise.resolve();\n                    default:\n                        return s.options.onDebug(e), Promise.resolve();\n                }\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.onInputWorkletMessage = function(e) {\n            var n, t;\n            \"connected\" === u.status && u.connection.sendMessage({\n                user_audio_chunk: (n = e.data[0].buffer, t = new Uint8Array(n), window.btoa(String.fromCharCode.apply(String, t)))\n            });\n        }, this.onOutputWorkletMessage = function(e) {\n            var n = e.data;\n            \"process\" === n.type && u.updateMode(n.finished ? \"listening\" : \"speaking\");\n        }, this.addAudioBase64Chunk = function(e) {\n            u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                type: \"clearInterrupted\"\n            }), u.output.worklet.port.postMessage({\n                type: \"buffer\",\n                buffer: $ee5c819c8591c8f0$var$n(e)\n            });\n        }, this.fadeOutAudio = function() {\n            u.updateMode(\"listening\"), u.output.worklet.port.postMessage({\n                type: \"interrupt\"\n            }), u.output.gain.gain.exponentialRampToValueAtTime(1e-4, u.output.context.currentTime + 2), setTimeout(function() {\n                u.output.gain.gain.value = u.volume, u.output.worklet.port.postMessage({\n                    type: \"clearInterrupted\"\n                });\n            }, 2e3);\n        }, this.onError = function(e, n) {\n            console.error(e, n), u.options.onError(e, n);\n        }, this.calculateVolume = function(e) {\n            if (0 === e.length) return 0;\n            for(var n = 0, t = 0; t < e.length; t++)n += e[t] / 255;\n            return (n /= e.length) < 0 ? 0 : n > 1 ? 1 : n;\n        }, this.getId = function() {\n            return u.connection.conversationId;\n        }, this.isOpen = function() {\n            return \"connected\" === u.status;\n        }, this.setVolume = function(e) {\n            u.volume = e.volume;\n        }, this.setMicMuted = function(e) {\n            u.input.setMuted(e);\n        }, this.getInputByteFrequencyData = function() {\n            return null != u.inputFrequencyData || (u.inputFrequencyData = new Uint8Array(u.input.analyser.frequencyBinCount)), u.input.analyser.getByteFrequencyData(u.inputFrequencyData), u.inputFrequencyData;\n        }, this.getOutputByteFrequencyData = function() {\n            return null != u.outputFrequencyData || (u.outputFrequencyData = new Uint8Array(u.output.analyser.frequencyBinCount)), u.output.analyser.getByteFrequencyData(u.outputFrequencyData), u.outputFrequencyData;\n        }, this.getInputVolume = function() {\n            return u.calculateVolume(u.getInputByteFrequencyData());\n        }, this.getOutputVolume = function() {\n            return u.calculateVolume(u.getOutputByteFrequencyData());\n        }, this.sendFeedback = function(e) {\n            u.canSendFeedback ? (u.connection.sendMessage({\n                type: \"feedback\",\n                score: e ? \"like\" : \"dislike\",\n                event_id: u.currentEventId\n            }), u.lastFeedbackEventId = u.currentEventId, u.updateCanSendFeedback()) : console.warn(0 === u.lastFeedbackEventId ? \"Cannot send feedback: the conversation has not started yet.\" : \"Cannot send feedback: feedback has already been sent for the current response.\");\n        }, this.sendContextualUpdate = function(e) {\n            u.connection.sendMessage({\n                type: \"contextual_update\",\n                text: e\n            });\n        }, this.options = e, this.connection = t, this.input = o, this.output = r, this.wakeLock = i, this.options.onConnect({\n            conversationId: t.conversationId\n        }), this.connection.onDisconnect(this.endSessionWithDetails), this.connection.onMessage(this.onMessage), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus(\"connected\");\n    }\n    return t.startSession = function(n) {\n        try {\n            var o = function() {\n                return $ee5c819c8591c8f0$var$h(function() {\n                    return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                        audio: !0\n                    })).then(function(o) {\n                        var h;\n                        function p() {\n                            return Promise.resolve($ee5c819c8591c8f0$var$l.create(n)).then(function(o) {\n                                return c = o, Promise.resolve(Promise.all([\n                                    $ee5c819c8591c8f0$var$i.create($ee5c819c8591c8f0$var$e({}, c.inputFormat, {\n                                        preferHeadphonesForIosDevices: n.preferHeadphonesForIosDevices\n                                    })),\n                                    $ee5c819c8591c8f0$var$u.create(c.outputFormat)\n                                ])).then(function(e) {\n                                    var n;\n                                    return s = e[0], d = e[1], null == (n = m) || n.getTracks().forEach(function(e) {\n                                        return e.stop();\n                                    }), m = null, new t(a, c, s, d, v);\n                                });\n                            });\n                        }\n                        m = o;\n                        var f, g = null != (h = n.connectionDelay) ? h : {\n                            default: 0,\n                            android: 3e3\n                        }, y = g.default;\n                        if (/android/i.test(navigator.userAgent)) y = null != (f = g.android) ? f : y;\n                        else if ($ee5c819c8591c8f0$var$r()) {\n                            var _;\n                            y = null != (_ = g.ios) ? _ : y;\n                        }\n                        var b = function() {\n                            if (y > 0) return Promise.resolve(new Promise(function(e) {\n                                return setTimeout(e, y);\n                            })).then(function() {});\n                        }();\n                        return b && b.then ? b.then(p) : p();\n                    });\n                }, function(e) {\n                    var n, t, o;\n                    return a.onStatusChange({\n                        status: \"disconnected\"\n                    }), null == (n = m) || n.getTracks().forEach(function(e) {\n                        return e.stop();\n                    }), null == (t = c) || t.close(), Promise.resolve(null == (o = s) ? void 0 : o.close()).then(function() {\n                        var n;\n                        return Promise.resolve(null == (n = d) ? void 0 : n.close()).then(function() {\n                            function n() {\n                                throw e;\n                            }\n                            var t = $ee5c819c8591c8f0$var$h(function() {\n                                var e;\n                                return Promise.resolve(null == (e = v) ? void 0 : e.release()).then(function() {\n                                    v = null;\n                                });\n                            }, function() {});\n                            return t && t.then ? t.then(n) : n();\n                        });\n                    });\n                });\n            }, a = $ee5c819c8591c8f0$var$e({}, $ee5c819c8591c8f0$var$p, $ee5c819c8591c8f0$var$f, n);\n            a.onStatusChange({\n                status: \"connecting\"\n            }), a.onCanSendFeedbackChange({\n                canSendFeedback: !1\n            });\n            var s = null, c = null, d = null, m = null, v = null, g = function(e) {\n                if (null == (e = n.useWakeLock) || e) {\n                    var t = $ee5c819c8591c8f0$var$h(function() {\n                        return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e) {\n                            v = e;\n                        });\n                    }, function() {});\n                    if (t && t.then) return t.then(function() {});\n                }\n            }();\n            return Promise.resolve(g && g.then ? g.then(o) : o());\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, t;\n}();\nfunction $ee5c819c8591c8f0$export$d6afbf68dbf63e6a(e, n, t) {\n    return void 0 === t && (t = \"https://api.elevenlabs.io\"), fetch(t + \"/v1/convai/conversations/\" + e + \"/feedback\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            feedback: n ? \"like\" : \"dislike\"\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\n\n// Visualization module: canvas-based idle circle and reactive line driven by audio\n// Visualization modes registry\n// Line visualization mode\nclass $ab6263d00374df5c$export$5cfa08cdc2103d04 {\n    constructor(config = {}){\n        this.color = config.color || '#00ff80';\n        this.shadowBlur = config.shadowBlur || 16;\n        this.lineWidth = config.lineWidth || 3;\n        this.backgroundImage = config.backgroundImage || null;\n    }\n    setup(containerElement) {\n        // Setup background image for line visualizer\n        if (containerElement && this.backgroundImage) {\n            containerElement.style.setProperty('--bg-image', `url('${this.backgroundImage}')`);\n            containerElement.classList.add('has-bg');\n            console.log('[LineVisualizer] Background image configured:', this.backgroundImage);\n        }\n    }\n    draw(ctx, canvas, analyser, dataArray, activeConversation, lastSdkBins) {\n        if (!ctx || !canvas) return;\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n        ctx.beginPath();\n        ctx.lineWidth = this.lineWidth;\n        ctx.strokeStyle = this.color;\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = this.shadowBlur;\n        const midY = Math.floor(h / 2);\n        let rms = 0;\n        if (analyser && dataArray) {\n            analyser.getByteTimeDomainData(dataArray);\n            // Remove DC offset to keep center exactly at midY\n            let mean = 0;\n            for(let i = 0; i < dataArray.length; i++)mean += dataArray[i];\n            mean /= dataArray.length; // around 128, but measured live\n            const step = w / dataArray.length;\n            let sum = 0;\n            for(let i = 0; i < dataArray.length; i++){\n                const centered = (dataArray[i] - mean) / 128; // now ~-1..1 around 0\n                const x = i * step;\n                const y = midY + centered * (h * 0.22);\n                if (i === 0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n                sum += centered * centered;\n            }\n            rms = Math.sqrt(sum / dataArray.length);\n        } else if (activeConversation?.getOutputByteFrequencyData) {\n            try {\n                const res = activeConversation.getOutputByteFrequencyData();\n                if (res && typeof res.then === 'function') res.then((bins)=>{\n                    lastSdkBins = bins;\n                }).catch(()=>{});\n                else if (res instanceof Uint8Array) lastSdkBins = res;\n            } catch  {}\n            const bins = lastSdkBins;\n            const len = bins?.length || 0;\n            if (len > 0) {\n                // Center bins by subtracting their average so graph oscillates equally\n                let avg = 0;\n                for(let i = 0; i < len; i++)avg += bins[i];\n                avg /= len || 1;\n                const step = w / len;\n                let sum = 0;\n                for(let i = 0; i < len; i++){\n                    const centered = (bins[i] - avg) / 255; // roughly -0.5..0.5\n                    const x = i * step;\n                    const y = midY + centered * 2 * (h * 0.22); // scale to ~-1..1\n                    if (i === 0) ctx.moveTo(x, y);\n                    else ctx.lineTo(x, y);\n                    sum += centered * centered;\n                }\n                rms = Math.sqrt(sum / len) / 1.1; // rough normalization\n            }\n        }\n        ctx.stroke();\n        return {\n            rms: rms\n        };\n    }\n    drawIdle(ctx, canvas, tSec) {\n        if (!ctx || !canvas) return;\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n        const cx = w / 2;\n        const cy = h / 2;\n        const base = Math.min(w, h) * 0.12;\n        const r = base * (1 + 0.06 * Math.sin(tSec * 2 * Math.PI * 0.9));\n        ctx.shadowColor = this.color;\n        ctx.shadowBlur = 20;\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = this.lineWidth;\n        ctx.beginPath();\n        ctx.arc(cx, cy, r, 0, Math.PI * 2);\n        ctx.stroke();\n    }\n}\n\n\n// Image visualization mode\nclass $5f32edbde13c9793$export$d829f6dfe7a96db5 {\n    constructor(config = {}){\n        console.log('[ImageVisualizer] Constructor called with config:', config);\n        this.mode = 'image';\n        this.interval = config.interval || 200; // ms between frames\n        this.talkImages = config.talk_images || [];\n        this.idleImages = config.idle_images || [];\n        this.backgroundColor = config.backgroundColor || '#000000';\n        console.log('[ImageVisualizer] Talk images:', this.talkImages);\n        console.log('[ImageVisualizer] Idle images:', this.idleImages);\n        // Preloaded images\n        this.talkImageElements = [];\n        this.idleImageElements = [];\n        this.imagesLoaded = false;\n        this.loadingPromise = null;\n        // Animation state\n        this.currentTalkFrame = 0;\n        this.lastFrameTime = 0;\n        this.currentIdleImage = null;\n        // Start preloading images\n        this.preloadImages();\n    }\n    setup(containerElement) {\n        // Setup background color for image visualizer\n        if (containerElement) {\n            containerElement.style.backgroundColor = this.backgroundColor;\n            console.log('[ImageVisualizer] Background color configured:', this.backgroundColor);\n            // If there's a background image class, remove it for image mode\n            containerElement.classList.remove('has-bg');\n            containerElement.style.removeProperty('--bg-image');\n        }\n    }\n    async preloadImages() {\n        if (this.loadingPromise) return this.loadingPromise;\n        this.loadingPromise = new Promise(async (resolve)=>{\n            const loadImage = (src)=>{\n                return new Promise((resolveImg, rejectImg)=>{\n                    const img = new Image();\n                    img.onload = ()=>resolveImg(img);\n                    img.onerror = ()=>{\n                        console.warn(`[ImageVisualizer] Failed to load image: ${src}`);\n                        rejectImg(new Error(`Failed to load ${src}`));\n                    };\n                    img.src = src;\n                });\n            };\n            try {\n                // Load all talk images\n                console.log('[ImageVisualizer] Preloading talk images:', this.talkImages);\n                const talkPromises = this.talkImages.map((src)=>loadImage(src).catch(()=>null));\n                this.talkImageElements = (await Promise.all(talkPromises)).filter((img)=>img !== null);\n                // Load all idle images\n                console.log('[ImageVisualizer] Preloading idle images:', this.idleImages);\n                const idlePromises = this.idleImages.map((src)=>loadImage(src).catch(()=>null));\n                this.idleImageElements = (await Promise.all(idlePromises)).filter((img)=>img !== null);\n                this.imagesLoaded = true;\n                console.log('[ImageVisualizer] All images preloaded successfully');\n                console.log(`  - Talk images: ${this.talkImageElements.length}`);\n                console.log(`  - Idle images: ${this.idleImageElements.length}`);\n                // Pick random idle image\n                if (this.idleImageElements.length > 0) this.currentIdleImage = this.idleImageElements[Math.floor(Math.random() * this.idleImageElements.length)];\n                resolve();\n            } catch (error) {\n                console.error('[ImageVisualizer] Error preloading images:', error);\n                this.imagesLoaded = true; // Mark as loaded anyway to avoid blocking\n                resolve();\n            }\n        });\n        return this.loadingPromise;\n    }\n    drawImage(ctx, canvas, img) {\n        if (!ctx || !canvas || !img) return;\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        // Clear canvas\n        ctx.clearRect(0, 0, w, h);\n        // Calculate scaling to fit image while maintaining aspect ratio\n        const imgAspect = img.width / img.height;\n        const canvasAspect = w / h;\n        let drawWidth, drawHeight, drawX, drawY;\n        if (imgAspect > canvasAspect) {\n            // Image is wider than canvas\n            drawWidth = w;\n            drawHeight = w / imgAspect;\n            drawX = 0;\n            drawY = (h - drawHeight) / 2;\n        } else {\n            // Image is taller than canvas\n            drawHeight = h;\n            drawWidth = h * imgAspect;\n            drawX = (w - drawWidth) / 2;\n            drawY = 0;\n        }\n        // Draw image centered and scaled\n        ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);\n    }\n    draw(ctx, canvas, analyser, dataArray, activeConversation, lastSdkBins) {\n        if (!this.imagesLoaded || this.talkImageElements.length === 0) {\n            // Fallback: draw placeholder\n            this.drawPlaceholder(ctx, canvas, 'Loading...', '#00ff80');\n            return {\n                rms: 0\n            };\n        }\n        const now = performance.now();\n        // Check if it's time to advance frame\n        if (now - this.lastFrameTime >= this.interval) {\n            this.currentTalkFrame = (this.currentTalkFrame + 1) % this.talkImageElements.length;\n            this.lastFrameTime = now;\n        }\n        const currentImage = this.talkImageElements[this.currentTalkFrame];\n        this.drawImage(ctx, canvas, currentImage);\n        // Calculate RMS for activity detection (simplified for image mode)\n        let rms = 0.5; // Always consider \"active\" when speaking\n        return {\n            rms: rms\n        };\n    }\n    drawIdle(ctx, canvas, tSec) {\n        if (!this.imagesLoaded) {\n            // Fallback: draw placeholder\n            this.drawPlaceholder(ctx, canvas, 'Loading...', '#00ff80');\n            return;\n        }\n        if (this.idleImageElements.length === 0) {\n            // No idle images, draw placeholder\n            this.drawPlaceholder(ctx, canvas, 'Idle', '#00ff80');\n            return;\n        }\n        // Draw current idle image\n        if (this.currentIdleImage) this.drawImage(ctx, canvas, this.currentIdleImage);\n    // Optionally, change idle image every N seconds\n    // For now, we keep the same random idle image\n    }\n    drawPlaceholder(ctx, canvas, text, color) {\n        if (!ctx || !canvas) return;\n        const w = canvas.clientWidth;\n        const h = canvas.clientHeight;\n        ctx.clearRect(0, 0, w, h);\n        ctx.fillStyle = color;\n        ctx.font = '24px sans-serif';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(text, w / 2, h / 2);\n    }\n    // Method to change idle image (can be called externally or on timer)\n    changeIdleImage() {\n        if (this.idleImageElements.length > 0) this.currentIdleImage = this.idleImageElements[Math.floor(Math.random() * this.idleImageElements.length)];\n    }\n    // Reset talk animation to first frame\n    resetTalkAnimation() {\n        this.currentTalkFrame = 0;\n        this.lastFrameTime = performance.now();\n    }\n}\n\n\nconst $ae14566df0fa5b9a$var$visualizerRegistry = {\n    line: (0, $ab6263d00374df5c$export$5cfa08cdc2103d04),\n    image: (0, $5f32edbde13c9793$export$d829f6dfe7a96db5)\n};\nfunction $ae14566df0fa5b9a$export$dffed1d1b59b285(mode, config) {\n    const VisualizerClass = $ae14566df0fa5b9a$var$visualizerRegistry[mode];\n    if (!VisualizerClass) {\n        console.warn(`[viz] Unknown visualizer mode: ${mode}, falling back to 'line'`);\n        return new (0, $ab6263d00374df5c$export$5cfa08cdc2103d04)(config);\n    }\n    return new VisualizerClass(config);\n}\nfunction $ae14566df0fa5b9a$export$2cb764bc700720b5(mode, VisualizerClass) {\n    $ae14566df0fa5b9a$var$visualizerRegistry[mode] = VisualizerClass;\n}\n\n\nlet $812c95b36586ff42$var$audioCtx = null;\nlet $812c95b36586ff42$var$analyser = null;\nlet $812c95b36586ff42$var$dataArray = null;\nlet $812c95b36586ff42$var$rafId = null;\nlet $812c95b36586ff42$var$canvas = null;\nlet $812c95b36586ff42$var$ctx = null;\nlet $812c95b36586ff42$var$vizState = 'idle'; // 'idle' | 'active' (state of the visualization)\nlet $812c95b36586ff42$var$silentGainNode = null;\nconst $812c95b36586ff42$var$mediaSourceMap = new WeakMap(); // HTMLMediaElement -> MediaElementAudioSourceNode\nconst $812c95b36586ff42$var$streamSourceMap = new WeakMap(); // MediaStream -> MediaStreamAudioSourceNode\nconst $812c95b36586ff42$var$playingEls = new Set();\nlet $812c95b36586ff42$var$activeConversation = null;\nlet $812c95b36586ff42$var$lastSdkBins = null;\n// Visualizer instance (pluggable)\nlet $812c95b36586ff42$var$visualizerInstance = null;\nlet $812c95b36586ff42$var$visualizerConfig = {\n    mode: 'line',\n    color: '#00ff80'\n};\nlet $812c95b36586ff42$var$containerElement = null;\n// Debug helpers\nlet $812c95b36586ff42$var$lastActive = false;\nlet $812c95b36586ff42$var$silentFrames = 0;\nconst $812c95b36586ff42$var$ACTIVE_THRESHOLD = 0.015; // RMS threshold\nconst $812c95b36586ff42$var$SILENT_FRAME_LIMIT = 20; // ~0.33s at 60fps\nconst $812c95b36586ff42$var$ensureAudioContext = async ()=>{\n    if (!$812c95b36586ff42$var$audioCtx) $812c95b36586ff42$var$audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    if ($812c95b36586ff42$var$audioCtx.state === 'suspended') try {\n        await $812c95b36586ff42$var$audioCtx.resume();\n    } catch  {}\n};\nconst $812c95b36586ff42$export$7df4508c5acf21ae = (mode)=>{\n    if (mode !== $812c95b36586ff42$var$vizState) {\n        console.log('[viz] state ->', mode);\n        $812c95b36586ff42$var$vizState = mode;\n    }\n};\nconst $812c95b36586ff42$export$4e772aeb208637a = (config, container = null)=>{\n    if (config) {\n        $812c95b36586ff42$var$visualizerConfig = {\n            ...$812c95b36586ff42$var$visualizerConfig,\n            ...config\n        };\n        console.log('[viz] config updated:', $812c95b36586ff42$var$visualizerConfig);\n        // Recreate visualizer instance with new config\n        $812c95b36586ff42$var$visualizerInstance = (0, $ae14566df0fa5b9a$export$dffed1d1b59b285)($812c95b36586ff42$var$visualizerConfig.mode || 'line', $812c95b36586ff42$var$visualizerConfig);\n        // Store container reference\n        if (container) $812c95b36586ff42$var$containerElement = container;\n        // Call setup method if visualizer has one\n        if ($812c95b36586ff42$var$visualizerInstance && typeof $812c95b36586ff42$var$visualizerInstance.setup === 'function' && $812c95b36586ff42$var$containerElement) $812c95b36586ff42$var$visualizerInstance.setup($812c95b36586ff42$var$containerElement);\n    }\n};\nconst $812c95b36586ff42$var$buildAnalyserChain = (sourceNode)=>{\n    $812c95b36586ff42$var$analyser = $812c95b36586ff42$var$audioCtx && $812c95b36586ff42$var$audioCtx.createAnalyser ? $812c95b36586ff42$var$audioCtx.createAnalyser() : null;\n    if (!$812c95b36586ff42$var$analyser) return;\n    $812c95b36586ff42$var$analyser.fftSize = 2048;\n    $812c95b36586ff42$var$dataArray = new Uint8Array($812c95b36586ff42$var$analyser.frequencyBinCount);\n    try {\n        sourceNode.disconnect();\n    } catch  {}\n    sourceNode.connect($812c95b36586ff42$var$analyser);\n    // Keep graph alive but silent\n    if (!$812c95b36586ff42$var$silentGainNode) {\n        $812c95b36586ff42$var$silentGainNode = $812c95b36586ff42$var$audioCtx.createGain();\n        $812c95b36586ff42$var$silentGainNode.gain.value = 0.0;\n        $812c95b36586ff42$var$silentGainNode.connect($812c95b36586ff42$var$audioCtx.destination);\n    }\n    try {\n        $812c95b36586ff42$var$analyser.disconnect();\n    } catch  {}\n    $812c95b36586ff42$var$analyser.connect($812c95b36586ff42$var$silentGainNode);\n};\nconst $812c95b36586ff42$export$f3feba0435d608ff = async (el)=>{\n    if (!(el instanceof HTMLMediaElement)) return;\n    await $812c95b36586ff42$var$ensureAudioContext();\n    let source = $812c95b36586ff42$var$mediaSourceMap.get(el);\n    if (!source) {\n        try {\n            source = $812c95b36586ff42$var$audioCtx.createMediaElementSource(el);\n        } catch (e) {\n            console.warn('[viz] createMediaElementSource failed', e);\n        }\n        if (source) $812c95b36586ff42$var$mediaSourceMap.set(el, source);\n    }\n    if (source) $812c95b36586ff42$var$buildAnalyserChain(source);\n    try {\n        el.crossOrigin = 'anonymous';\n    } catch  {}\n    console.log('[viz] MediaElement connected', {\n        src: el.currentSrc || el.src\n    });\n    // Track play/pause events to control visualization\n    el.addEventListener('play', ()=>{\n        $812c95b36586ff42$var$playingEls.add(el);\n        $812c95b36586ff42$export$7df4508c5acf21ae('active');\n        console.log('[viz] element play');\n    });\n    const onStop = ()=>{\n        $812c95b36586ff42$var$playingEls.delete(el);\n        if ($812c95b36586ff42$var$playingEls.size === 0) $812c95b36586ff42$export$7df4508c5acf21ae('idle');\n        console.log('[viz] element stop/pause, playing count:', $812c95b36586ff42$var$playingEls.size);\n    };\n    el.addEventListener('pause', onStop);\n    el.addEventListener('ended', onStop);\n};\nconst $812c95b36586ff42$export$b62ab7b01fb852c0 = async (stream)=>{\n    if (!(stream instanceof MediaStream)) return;\n    await $812c95b36586ff42$var$ensureAudioContext();\n    let source = $812c95b36586ff42$var$streamSourceMap.get(stream);\n    if (!source) {\n        try {\n            source = $812c95b36586ff42$var$audioCtx.createMediaStreamSource(stream);\n        } catch (e) {\n            console.warn('[viz] createMediaStreamSource failed', e);\n        }\n        if (source) $812c95b36586ff42$var$streamSourceMap.set(stream, source);\n    }\n    if (source) $812c95b36586ff42$var$buildAnalyserChain(source);\n    $812c95b36586ff42$export$7df4508c5acf21ae('active');\n    console.log('[viz] MediaStream connected with tracks:', stream.getTracks().map((t)=>t.kind + ':' + t.readyState));\n    stream.getTracks().forEach((t)=>t.addEventListener('ended', ()=>{\n            if (stream.getTracks().every((tr)=>tr.readyState === 'ended')) {\n                $812c95b36586ff42$export$7df4508c5acf21ae('idle');\n                console.log('[viz] stream ended');\n            }\n        }));\n};\nconst $812c95b36586ff42$export$1fce99c0adc6f9c = ()=>{\n    const handler = async (type, target)=>{\n        if (!(target instanceof HTMLMediaElement)) return;\n        if (type === 'play') {\n            await $812c95b36586ff42$export$f3feba0435d608ff(target);\n            $812c95b36586ff42$var$playingEls.add(target);\n            $812c95b36586ff42$export$7df4508c5acf21ae('active');\n            console.log('[viz] global play', target.tagName);\n        } else {\n            $812c95b36586ff42$var$playingEls.delete(target);\n            if ($812c95b36586ff42$var$playingEls.size === 0) $812c95b36586ff42$export$7df4508c5acf21ae('idle');\n            console.log('[viz] global', type, 'playing count:', $812c95b36586ff42$var$playingEls.size);\n        }\n    };\n    document.addEventListener('play', (e)=>handler('play', e.target), true);\n    document.addEventListener('pause', (e)=>handler('pause', e.target), true);\n    document.addEventListener('ended', (e)=>handler('ended', e.target), true);\n};\nconst $812c95b36586ff42$export$49b7f52cc38c934a = async (conv)=>{\n    try {\n        if (!conv) return;\n        // Try element\n        const el = conv.audioElement || conv.audioEl || conv.audio;\n        if (el instanceof HTMLMediaElement) {\n            await $812c95b36586ff42$export$f3feba0435d608ff(el);\n            return;\n        }\n        // Try stream\n        const stream = conv.mediaStream || conv.outputStream || conv.remoteStream || conv.stream;\n        if (stream instanceof MediaStream) {\n            await $812c95b36586ff42$export$b62ab7b01fb852c0(stream);\n            return;\n        }\n        // Fallback: observe DOM for media created later\n        const mo = new MutationObserver((muts)=>{\n            muts.forEach((mut)=>{\n                mut.addedNodes?.forEach((n)=>{\n                    if (n instanceof HTMLMediaElement) $812c95b36586ff42$export$f3feba0435d608ff(n);\n                    if (n.querySelectorAll) n.querySelectorAll('audio,video').forEach($812c95b36586ff42$export$f3feba0435d608ff);\n                });\n            });\n        });\n        mo.observe(document.documentElement, {\n            childList: true,\n            subtree: true\n        });\n    } catch (e) {\n        console.warn('[viz] hookConversationAudio failed', e);\n    }\n};\nconst $812c95b36586ff42$export$84cc0adba6eaa4c6 = (conv)=>{\n    $812c95b36586ff42$var$activeConversation = conv;\n};\nconst $812c95b36586ff42$var$initCanvas = (canvasId)=>{\n    $812c95b36586ff42$var$canvas = document.getElementById(canvasId);\n    if (!$812c95b36586ff42$var$canvas) return;\n    $812c95b36586ff42$var$ctx = $812c95b36586ff42$var$canvas.getContext('2d');\n    const resize = ()=>{\n        const dpr = window.devicePixelRatio || 1;\n        const w = $812c95b36586ff42$var$canvas.clientWidth || window.innerWidth;\n        const h = $812c95b36586ff42$var$canvas.clientHeight || window.innerHeight;\n        $812c95b36586ff42$var$canvas.width = Math.floor(w * dpr);\n        $812c95b36586ff42$var$canvas.height = Math.floor(h * dpr);\n        $812c95b36586ff42$var$ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n    resize();\n    window.addEventListener('resize', resize);\n};\nconst $812c95b36586ff42$var$drawIdle = (tSec)=>{\n    if (!$812c95b36586ff42$var$visualizerInstance) return;\n    $812c95b36586ff42$var$visualizerInstance.drawIdle($812c95b36586ff42$var$ctx, $812c95b36586ff42$var$canvas, tSec);\n};\nconst $812c95b36586ff42$var$drawActive = ()=>{\n    if (!$812c95b36586ff42$var$visualizerInstance) return;\n    const result = $812c95b36586ff42$var$visualizerInstance.draw($812c95b36586ff42$var$ctx, $812c95b36586ff42$var$canvas, $812c95b36586ff42$var$analyser, $812c95b36586ff42$var$dataArray, $812c95b36586ff42$var$activeConversation, $812c95b36586ff42$var$lastSdkBins);\n    const rms = result?.rms || 0;\n    // Debug: log when audio starts/stops\n    const isActive = rms > $812c95b36586ff42$var$ACTIVE_THRESHOLD;\n    if (isActive && !$812c95b36586ff42$var$lastActive) console.log('[viz] audio signal detected, rms=', rms.toFixed(3));\n    if (!isActive) {\n        $812c95b36586ff42$var$silentFrames++;\n        if ($812c95b36586ff42$var$lastActive && $812c95b36586ff42$var$silentFrames > $812c95b36586ff42$var$SILENT_FRAME_LIMIT) console.log('[viz] audio gone silent');\n    } else $812c95b36586ff42$var$silentFrames = 0;\n    $812c95b36586ff42$var$lastActive = isActive;\n};\nconst $812c95b36586ff42$export$d379ea01857aee09 = (canvasId = 'vizCanvas', config = null, container = null)=>{\n    // Store container reference\n    if (container) $812c95b36586ff42$var$containerElement = container;\n    if (config) $812c95b36586ff42$export$4e772aeb208637a(config, $812c95b36586ff42$var$containerElement);\n    else if (!$812c95b36586ff42$var$visualizerInstance) {\n        // Initialize with default config\n        $812c95b36586ff42$var$visualizerInstance = (0, $ae14566df0fa5b9a$export$dffed1d1b59b285)($812c95b36586ff42$var$visualizerConfig.mode, $812c95b36586ff42$var$visualizerConfig);\n        // Call setup if we have a container\n        if ($812c95b36586ff42$var$visualizerInstance && typeof $812c95b36586ff42$var$visualizerInstance.setup === 'function' && $812c95b36586ff42$var$containerElement) $812c95b36586ff42$var$visualizerInstance.setup($812c95b36586ff42$var$containerElement);\n    }\n    $812c95b36586ff42$var$initCanvas(canvasId);\n    cancelAnimationFrame($812c95b36586ff42$var$rafId);\n    const tick = (tMs)=>{\n        const tSec = tMs / 1000;\n        // Use vizState to determine if active or idle, not visualizer mode\n        if ($812c95b36586ff42$var$vizState === 'active' || $812c95b36586ff42$var$vizState === 'line') $812c95b36586ff42$var$drawActive();\n        else $812c95b36586ff42$var$drawIdle(tSec);\n        $812c95b36586ff42$var$rafId = requestAnimationFrame(tick);\n    };\n    $812c95b36586ff42$var$rafId = requestAnimationFrame(tick);\n};\n\n\nconst $dad545c909cfec2d$var$startBtn = document.getElementById('startBtn');\nconst $dad545c909cfec2d$var$stopBtn = document.getElementById('stopBtn');\nconst $dad545c909cfec2d$var$statusEl = document.getElementById('status');\nlet $dad545c909cfec2d$var$conversationInstance = null;\nlet $dad545c909cfec2d$var$audio = null;\n// Visualizer state is managed in visualizer.js\n// on page load: check for name and id parameters in url, then set the <span id=name> object\nconst $dad545c909cfec2d$var$urlParams = new URLSearchParams(window.location.search);\nlet $dad545c909cfec2d$var$config = {\n    name: $dad545c909cfec2d$var$urlParams.get('name'),\n    agentId: $dad545c909cfec2d$var$urlParams.get('id'),\n    fullscreen: $dad545c909cfec2d$var$urlParams.get('fullscreen') === 'true' || $dad545c909cfec2d$var$urlParams.get('fullscreen') === '1'\n};\n//try to load  a {name}.json from the server overwriting the whole config object\nconst $dad545c909cfec2d$var$loadConfig = async ()=>{\n    if (!$dad545c909cfec2d$var$config.agentId) try {\n        const response = await fetch(`./agents/${$dad545c909cfec2d$var$config.name}.json`);\n        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        const data = await response.json();\n        $dad545c909cfec2d$var$config = data;\n        console.log('Config loaded:', $dad545c909cfec2d$var$config);\n    } catch (error) {\n        console.error('Error loading config:', error);\n    }\n    document.getElementById('name').textContent = $dad545c909cfec2d$var$config.name;\n    if (!$dad545c909cfec2d$var$config.agentId) {\n        const startBtn = document.getElementById('startBtn');\n        startBtn.disabled = true;\n        startBtn.innerText = \"Agente n\\xe3o encontrado!\";\n    }\n    // Override fullscreen from URL parameter\n    $dad545c909cfec2d$var$config.fullscreen = $dad545c909cfec2d$var$urlParams.get('fullscreen') === 'true' || $dad545c909cfec2d$var$urlParams.get('fullscreen') === '1';\n    // Initialize fullscreen mode after config is loaded\n    $dad545c909cfec2d$var$initializeFullscreenMode();\n};\n// Função para inicializar modo fullscreen\nconst $dad545c909cfec2d$var$initializeFullscreenMode = ()=>{\n    const cardEl = document.getElementById('card');\n    const fullModeEl = document.getElementById('fullMode');\n    if ($dad545c909cfec2d$var$config.fullscreen) {\n        console.log('[fullscreen] Initializing fullscreen mode');\n        // Hide card, show overlay\n        if (cardEl) cardEl.classList.add('hidden');\n        if (fullModeEl) fullModeEl.classList.remove('hidden');\n        // Initialize visualizer with config\n        const vizConfig = $dad545c909cfec2d$var$config.visualizer || {\n            mode: 'line',\n            color: '#00ff80'\n        };\n        console.log('[fullscreen] Visualizer config:', vizConfig);\n        // Add backgroundImage to visualizer config if mode is 'line'\n        if (vizConfig.mode === 'line' && $dad545c909cfec2d$var$config.backgroundImage) vizConfig.backgroundImage = $dad545c909cfec2d$var$config.backgroundImage;\n        (0, $812c95b36586ff42$export$d379ea01857aee09)('vizCanvas', vizConfig, fullModeEl);\n        (0, $812c95b36586ff42$export$1fce99c0adc6f9c)();\n        // Click anywhere to start/stop\n        fullModeEl.addEventListener('click', async ()=>{\n            if (!$dad545c909cfec2d$var$conversationInstance) await $dad545c909cfec2d$var$startConversation();\n            else await $dad545c909cfec2d$var$endConversation();\n        });\n        // Idle by default\n        (0, $812c95b36586ff42$export$7df4508c5acf21ae)('idle');\n    }\n};\n$dad545c909cfec2d$var$loadConfig();\n// Função para atualizar o status na interface\nconst $dad545c909cfec2d$var$updateStatus = (status)=>{\n    $dad545c909cfec2d$var$statusEl.textContent = \"Status: \" + status;\n};\n// Função para iniciar a conversa\nasync function $dad545c909cfec2d$var$startConversation() {\n    try {\n        // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n        await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        $dad545c909cfec2d$var$updateStatus('Microfone liberado');\n        //Play an mp3 file and wait for it to finish\n        if ($dad545c909cfec2d$var$config.startAudio) {\n            $dad545c909cfec2d$var$startBtn.classList.add('hidden');\n            $dad545c909cfec2d$var$stopBtn.classList.remove('hidden');\n            $dad545c909cfec2d$var$audio = new Audio($dad545c909cfec2d$var$config.startAudio);\n            try {\n                $dad545c909cfec2d$var$audio.crossOrigin = 'anonymous';\n            } catch  {}\n            if ($dad545c909cfec2d$var$config.fullscreen) {\n                await (0, $812c95b36586ff42$export$f3feba0435d608ff)($dad545c909cfec2d$var$audio);\n                (0, $812c95b36586ff42$export$7df4508c5acf21ae)('active');\n            }\n            $dad545c909cfec2d$var$audio.play();\n            $dad545c909cfec2d$var$updateStatus(\"Reproduzindo \\xe1udio de boas-vindas\");\n            await new Promise((resolve)=>{\n                $dad545c909cfec2d$var$audio.onended = ()=>{\n                    if ($dad545c909cfec2d$var$config.fullscreen) (0, $812c95b36586ff42$export$7df4508c5acf21ae)('idle');\n                    resolve();\n                };\n            });\n        }\n        // Inicia a sessão de conversa com o agente\n        //Parse o ID do agente a partir da URL, parametro id\n        $dad545c909cfec2d$var$conversationInstance = await (0, $ee5c819c8591c8f0$export$8e86b22308382a1).startSession({\n            agentId: $dad545c909cfec2d$var$config.agentId,\n            // Callbacks opcionais:\n            onConnect: ()=>{\n                console.log('Conectado ao agente!');\n                $dad545c909cfec2d$var$updateStatus('Conectado');\n            },\n            onDisconnect: ()=>{\n                console.log(\"Conex\\xe3o encerrada.\");\n                $dad545c909cfec2d$var$updateStatus('Desconectado');\n            },\n            onMessage: (message)=>{\n                console.log('Mensagem recebida:', message);\n            // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n            },\n            onError: (error)=>{\n                console.error(\"Erro na sess\\xe3o:\", error);\n                $dad545c909cfec2d$var$updateStatus('Erro');\n            },\n            onStatusChange: (status)=>{\n                console.log('Status alterado:', status);\n            },\n            onModeChange: (mode)=>{\n                console.log('Modo alterado:', mode);\n                // Control visualization directly based on SDK mode\n                try {\n                    if ($dad545c909cfec2d$var$config.fullscreen) {\n                        if (mode.mode == 'speaking') {\n                            (0, $812c95b36586ff42$export$7df4508c5acf21ae)('active');\n                            console.log('[viz] speaking!!!');\n                        } else {\n                            // Any other mode (listening, idle, etc.) goes to idle\n                            (0, $812c95b36586ff42$export$7df4508c5acf21ae)('idle');\n                            console.log('[viz] idle!');\n                        }\n                    }\n                } catch  {}\n            }\n        });\n        // Try to hook SDK audio for visualization\n        if ($dad545c909cfec2d$var$config.fullscreen) {\n            await (0, $812c95b36586ff42$export$49b7f52cc38c934a)($dad545c909cfec2d$var$conversationInstance);\n            (0, $812c95b36586ff42$export$84cc0adba6eaa4c6)($dad545c909cfec2d$var$conversationInstance);\n        }\n    } catch (error) {\n        console.error('Erro ao iniciar a conversa:', error);\n        $dad545c909cfec2d$var$updateStatus('Erro ao iniciar');\n    }\n}\n// Função para encerrar a conversa\nasync function $dad545c909cfec2d$var$endConversation() {\n    if ($dad545c909cfec2d$var$audio) {\n        $dad545c909cfec2d$var$audio.pause();\n        $dad545c909cfec2d$var$audio = null;\n    }\n    // Return to idle\n    (0, $812c95b36586ff42$export$7df4508c5acf21ae)('idle');\n    if ($dad545c909cfec2d$var$conversationInstance) {\n        await $dad545c909cfec2d$var$conversationInstance.endSession();\n        $dad545c909cfec2d$var$conversationInstance = null;\n    }\n    $dad545c909cfec2d$var$updateStatus('Desconectado');\n    $dad545c909cfec2d$var$startBtn.classList.remove('hidden');\n    $dad545c909cfec2d$var$stopBtn.classList.add('hidden');\n}\n// Eventos dos botões\n$dad545c909cfec2d$var$startBtn.addEventListener('click', $dad545c909cfec2d$var$startConversation);\n$dad545c909cfec2d$var$stopBtn.addEventListener('click', $dad545c909cfec2d$var$endConversation);\n\n\n//# sourceMappingURL=arapy-11labs.efa7e19f.js.map\n","// Importa o Conversation do pacote @11labs/client\n import { Conversation } from '@11labs/client';\n import { initFullVisualizer, observeMediaPlayback, hookConversationAudio, connectMediaEl, setActiveConversation, updateVisualizerMode, configureVisualizer} from './visualizer.js';\n\n const startBtn = document.getElementById('startBtn');\n const stopBtn = document.getElementById('stopBtn');\n const statusEl = document.getElementById('status');\n let conversationInstance = null;\n let audio = null;\n// Visualizer state is managed in visualizer.js\n\n// on page load: check for name and id parameters in url, then set the <span id=name> object\n\n\nconst urlParams = new URLSearchParams(window.location.search);\nlet config = {\n    name: urlParams.get('name'),\n    agentId: urlParams.get('id'),\n    fullscreen: urlParams.get('fullscreen') === 'true' || urlParams.get('fullscreen') === '1',\n}\n\n//try to load  a {name}.json from the server overwriting the whole config object\nconst loadConfig = async () => {\n  if (!config.agentId) {\n      try {\n          const response = await fetch(`./agents/${config.name}.json`);\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n          const data = await response.json();\n          config = data;\n          console.log('Config loaded:', config);\n\n      } catch (error) {\n          console.error('Error loading config:', error);\n      }\n  }\n\n  document.getElementById('name').textContent = config.name;\n\n  if (!config.agentId) {\n      const startBtn = document.getElementById('startBtn');\n      startBtn.disabled = true;\n      startBtn.innerText = \"Agente não encontrado!\";\n  }\n\n  // Override fullscreen from URL parameter\n  config.fullscreen = urlParams.get('fullscreen') === 'true' || urlParams.get('fullscreen') === '1';\n  \n  // Initialize fullscreen mode after config is loaded\n  initializeFullscreenMode();\n};\n\n// Função para inicializar modo fullscreen\nconst initializeFullscreenMode = () => {\n  const cardEl = document.getElementById('card');\n  const fullModeEl = document.getElementById('fullMode');\n  \n  if (config.fullscreen) {\n    console.log('[fullscreen] Initializing fullscreen mode');\n    // Hide card, show overlay\n    if (cardEl) cardEl.classList.add('hidden');\n    if (fullModeEl) fullModeEl.classList.remove('hidden');\n    \n    // Initialize visualizer with config\n    const vizConfig = config.visualizer || { mode: 'line', color: '#00ff80' };\n    console.log('[fullscreen] Visualizer config:', vizConfig);\n    \n    // Add backgroundImage to visualizer config if mode is 'line'\n    if (vizConfig.mode === 'line' && config.backgroundImage) {\n      vizConfig.backgroundImage = config.backgroundImage;\n    }\n    \n    initFullVisualizer('vizCanvas', vizConfig, fullModeEl);\n    observeMediaPlayback();\n    \n    // Click anywhere to start/stop\n    fullModeEl.addEventListener('click', async () => {\n      if (!conversationInstance) {\n        await startConversation();\n      } else {\n        await endConversation();\n      }\n    });\n    \n    // Idle by default\n    updateVisualizerMode('idle');\n  }\n};\n\nloadConfig();\n\n // Função para atualizar o status na interface\n const updateStatus = (status) => {\n   statusEl.textContent = \"Status: \" + status;\n };\n\n // Função para iniciar a conversa\n async function startConversation() {\n   try {\n     // Primeiro, solicite acesso ao microfone e explique o porquê ao usuário\n     await navigator.mediaDevices.getUserMedia({ audio: true });\n     updateStatus('Microfone liberado');\n\n    //Play an mp3 file and wait for it to finish\n      if (config.startAudio) {\n\n       startBtn.classList.add('hidden');\n       stopBtn.classList.remove('hidden');\n\n       audio = new Audio(config.startAudio);\n       try { audio.crossOrigin = 'anonymous'; } catch {}\n       if (config.fullscreen) {\n         await connectMediaEl(audio);\n         updateVisualizerMode('active');\n       }\n        audio.play();\n        updateStatus('Reproduzindo áudio de boas-vindas');\n        await new Promise((resolve) => {\n          audio.onended = () => {\n            if (config.fullscreen) updateVisualizerMode('idle');\n            resolve();\n          };\n        });  \n      }\n      \n     // Inicia a sessão de conversa com o agente\n     //Parse o ID do agente a partir da URL, parametro id\n     conversationInstance = await Conversation.startSession({\n       agentId: config.agentId,\n       // Callbacks opcionais:\n       onConnect: () => {\n         console.log('Conectado ao agente!');\n         updateStatus('Conectado');\n       },\n       onDisconnect: () => {\n         console.log('Conexão encerrada.');\n         updateStatus('Desconectado');\n       },\n       onMessage: (message) => {\n         console.log('Mensagem recebida:', message);\n         // Aqui você pode, por exemplo, atualizar a interface com transcrições ou processar o áudio recebido.\n       },\n       onError: (error) => {\n         console.error('Erro na sessão:', error);\n         updateStatus('Erro');\n       },\n       onStatusChange: (status) => {\n         console.log('Status alterado:', status);\n       },\n       onModeChange: (mode) => {\n          console.log('Modo alterado:', mode);\n          // Control visualization directly based on SDK mode\n          try {\n            if (config.fullscreen) {\n              if (mode.mode == 'speaking') {\n                updateVisualizerMode('active');\n                console.log('[viz] speaking!!!');\n              } else {\n                // Any other mode (listening, idle, etc.) goes to idle\n                updateVisualizerMode('idle');\n                console.log('[viz] idle!');\n              }\n            }\n          } catch {}\n       },\n     });\n\n      // Try to hook SDK audio for visualization\n      if (config.fullscreen) {\n        await hookConversationAudio(conversationInstance);\n        setActiveConversation(conversationInstance);\n      }\n\n   } catch (error) {\n     console.error('Erro ao iniciar a conversa:', error);\n     updateStatus('Erro ao iniciar');\n   }\n }\n\n // Função para encerrar a conversa\n async function endConversation() {\n   if (audio) {\n      audio.pause();\n      audio = null;\n   }\n   // Return to idle\n   updateVisualizerMode('idle');\n   if (conversationInstance) {\n     await conversationInstance.endSession();\n     conversationInstance = null;\n   }\n   updateStatus('Desconectado');\n   startBtn.classList.remove('hidden');\n   stopBtn.classList.add('hidden');\n }\n\n // Eventos dos botões\n startBtn.addEventListener('click', startConversation);\n stopBtn.addEventListener('click', endConversation);\n","function e(){return e=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)({}).hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},e.apply(null,arguments)}function n(e){for(var n=window.atob(e),t=n.length,o=new Uint8Array(t),r=0;r<t;r++)o[r]=n.charCodeAt(r);return o.buffer}var t=new Blob(['\\n      const BIAS = 0x84;\\n      const CLIP = 32635;\\n      const encodeTable = [\\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n      ];\\n      \\n      function encodeSample(sample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let muLawSample;\\n        sign = (sample >> 8) & 0x80;\\n        if (sign !== 0) sample = -sample;\\n        sample = sample + BIAS;\\n        if (sample > CLIP) sample = CLIP;\\n        exponent = encodeTable[(sample>>7) & 0xFF];\\n        mantissa = (sample >> (exponent+3)) & 0x0F;\\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\\n        \\n        return muLawSample;\\n      }\\n    \\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n                    \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.isMuted = false;\\n                this.buffer = []; // Initialize an empty buffer\\n                this.bufferSize = data.sampleRate / 4;\\n                this.format = data.format;\\n\\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n                    this.resampler = resampler;\\n                  });\\n                }\\n                break;\\n              case \"setMuted\":\\n                this.isMuted = data.isMuted;\\n                break;\\n            }\\n          };\\n        }\\n        process(inputs) {\\n          if (!this.buffer) {\\n            return true;\\n          }\\n          \\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = this.isMuted \\n                ? new Float32Array(this.buffer.length)\\n                : new Float32Array(this.buffer);\\n\\n              let encodedArray = this.format === \"ulaw\"\\n                ? new Uint8Array(float32Array.length)\\n                : new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n                // Scale the sample to the range [-32768, 32767]\\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\\n                if (this.format === \"ulaw\") {\\n                  value = encodeSample(Math.round(value));\\n                }\\n\\n                encodedArray[i] = value;\\n              }\\n\\n              // Send the buffered data to the main script\\n              this.port.postMessage([encodedArray, maxVolume]);\\n\\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '],{type:\"application/javascript\"}),o=URL.createObjectURL(t);function r(){return[\"iPad Simulator\",\"iPhone Simulator\",\"iPod Simulator\",\"iPad\",\"iPhone\",\"iPod\"].includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"ontouchend\"in document}var i=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=n,this.worklet=t,this.inputStream=o}e.create=function(n){var t=n.sampleRate,i=n.format,a=n.preferHeadphonesForIosDevices;try{var s=null,u=null;return Promise.resolve(function(n,c){try{var l=function(){function n(){function n(){return Promise.resolve(s.audioWorklet.addModule(o)).then(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:c})).then(function(n){var o=s.createMediaStreamSource(u=n),r=new AudioWorkletNode(s,\"raw-audio-processor\");return r.port.postMessage({type:\"setFormat\",format:i,sampleRate:t}),o.connect(a),a.connect(r),Promise.resolve(s.resume()).then(function(){return new e(s,a,r,u)})})})}var r=navigator.mediaDevices.getSupportedConstraints().sampleRate,a=(s=new window.AudioContext(r?{sampleRate:t}:{})).createAnalyser(),l=function(){if(!r)return Promise.resolve(s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function(){})}();return l&&l.then?l.then(n):n()}var c={sampleRate:{ideal:t},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}},l=function(){if(r()&&a)return Promise.resolve(window.navigator.mediaDevices.enumerateDevices()).then(function(e){var n=e.find(function(e){return\"audioinput\"===e.kind&&[\"airpod\",\"headphone\",\"earphone\"].find(function(n){return e.label.toLowerCase().includes(n)})});n&&(c.deviceId={ideal:n.deviceId})})}();return l&&l.then?l.then(n):n()}()}catch(e){return c(e)}return l&&l.then?l.then(void 0,c):l}(0,function(e){var n,t;throw null==(n=u)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=s)||t.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){try{return this.inputStream.getTracks().forEach(function(e){return e.stop()}),Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},n.setMuted=function(e){this.worklet.port.postMessage({type:\"setMuted\",isMuted:e})},e}(),a=new Blob(['\\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n      \\n      export function decodeSample(muLawSample) {\\n        let sign;\\n        let exponent;\\n        let mantissa;\\n        let sample;\\n        muLawSample = ~muLawSample;\\n        sign = (muLawSample & 0x80);\\n        exponent = (muLawSample >> 4) & 0x07;\\n        mantissa = muLawSample & 0x0F;\\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n        if (sign !== 0) sample = -sample;\\n\\n        return sample;\\n      }\\n      \\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n          \\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"setFormat\":\\n                this.format = data.format;\\n                break;\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(\\n                  this.format === \"ulaw\"\\n                    ? new Uint8Array(data.buffer)\\n                    : new Int16Array(data.buffer)\\n                );\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            let value = this.currentBuffer[this.cursor];\\n            if (this.format === \"ulaw\") {\\n              value = decodeSample(value);\\n            }\\n            output[i] = value / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '],{type:\"application/javascript\"}),s=URL.createObjectURL(a),u=/*#__PURE__*/function(){function e(e,n,t,o){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=n,this.gain=t,this.worklet=o}return e.create=function(n){var t=n.sampleRate,o=n.format;try{var r=null;return Promise.resolve(function(n,i){try{var a=(u=(r=new AudioContext({sampleRate:t})).createAnalyser(),(c=r.createGain()).connect(u),u.connect(r.destination),Promise.resolve(r.audioWorklet.addModule(s)).then(function(){var n=new AudioWorkletNode(r,\"audio-concat-processor\");return n.port.postMessage({type:\"setFormat\",format:o}),n.connect(c),Promise.resolve(r.resume()).then(function(){return new e(r,u,c,n)})}))}catch(e){return i(e)}var u,c;return a&&a.then?a.then(void 0,i):a}(0,function(e){var n;throw null==(n=r)||n.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}();function c(e){return!!e.type}var l=/*#__PURE__*/function(){function e(e,n,t,o){var r=this;this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.socket=e,this.conversationId=n,this.inputFormat=t,this.outputFormat=o,this.socket.addEventListener(\"error\",function(e){setTimeout(function(){return r.disconnect({reason:\"error\",message:\"The connection was closed due to a socket error.\",context:e})},0)}),this.socket.addEventListener(\"close\",function(e){r.disconnect(1e3===e.code?{reason:\"agent\",context:e}:{reason:\"error\",message:e.reason||\"The connection was closed by the server.\",context:e})}),this.socket.addEventListener(\"message\",function(e){try{var n=JSON.parse(e.data);if(!c(n))return;r.onMessageCallback?r.onMessageCallback(n):r.queue.push(n)}catch(e){}})}e.create=function(n){try{var t=null;return Promise.resolve(function(o,r){try{var i=(s=null!=(a=n.origin)?a:\"wss://api.elevenlabs.io\",u=n.signedUrl?n.signedUrl:s+\"/v1/convai/conversation?agent_id=\"+n.agentId,l=[\"convai\"],n.authorization&&l.push(\"bearer.\"+n.authorization),t=new WebSocket(u,l),Promise.resolve(new Promise(function(e,o){t.addEventListener(\"open\",function(){var e,o,r,i,a,s={type:\"conversation_initiation_client_data\"};n.overrides&&(s.conversation_config_override={agent:{prompt:null==(o=n.overrides.agent)?void 0:o.prompt,first_message:null==(r=n.overrides.agent)?void 0:r.firstMessage,language:null==(i=n.overrides.agent)?void 0:i.language},tts:{voice_id:null==(a=n.overrides.tts)?void 0:a.voiceId}}),n.customLlmExtraBody&&(s.custom_llm_extra_body=n.customLlmExtraBody),n.dynamicVariables&&(s.dynamic_variables=n.dynamicVariables),null==(e=t)||e.send(JSON.stringify(s))},{once:!0}),t.addEventListener(\"error\",function(e){setTimeout(function(){return o(e)},0)}),t.addEventListener(\"close\",o),t.addEventListener(\"message\",function(n){var t=JSON.parse(n.data);c(t)&&(\"conversation_initiation_metadata\"===t.type?e(t.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})})).then(function(n){var o=n.conversation_id,r=n.agent_output_audio_format,i=n.user_input_audio_format,a=d(null!=i?i:\"pcm_16000\"),s=d(r);return new e(t,o,a,s)}))}catch(e){return r(e)}var a,s,u,l;return i&&i.then?i.then(void 0,r):i}(0,function(e){var n;throw null==(n=t)||n.close(),e}))}catch(e){return Promise.reject(e)}};var n=e.prototype;return n.close=function(){this.socket.close()},n.sendMessage=function(e){this.socket.send(JSON.stringify(e))},n.onMessage=function(e){this.onMessageCallback=e,this.queue.forEach(e),this.queue=[]},n.onDisconnect=function(e){this.onDisconnectCallback=e,this.disconnectionDetails&&e(this.disconnectionDetails)},n.disconnect=function(e){var n;this.disconnectionDetails||(this.disconnectionDetails=e,null==(n=this.onDisconnectCallback)||n.call(this,e))},e}();function d(e){var n=e.split(\"_\"),t=n[0],o=n[1];if(![\"pcm\",\"ulaw\"].includes(t))throw new Error(\"Invalid format: \"+e);var r=parseInt(o);if(isNaN(r))throw new Error(\"Invalid sample rate: \"+o);return{format:t,sampleRate:r}}function h(e,n){try{var t=e()}catch(e){return n(e)}return t&&t.then?t.then(void 0,n):t}var p={clientTools:{}},f={onConnect:function(){},onDebug:function(){},onDisconnect:function(){},onError:function(){},onMessage:function(){},onAudio:function(){},onModeChange:function(){},onStatusChange:function(){},onCanSendFeedbackChange:function(){}},m=/*#__PURE__*/function(){function t(e,t,o,r,i){var a=this,s=this,u=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.wakeLock=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSession=function(){return u.endSessionWithDetails({reason:\"user\"})},this.endSessionWithDetails=function(e){try{var n=function(){return a.connection.close(),Promise.resolve(a.input.close()).then(function(){return Promise.resolve(a.output.close()).then(function(){a.updateStatus(\"disconnected\"),a.options.onDisconnect(e)})})};if(\"connected\"!==a.status&&\"connecting\"!==a.status)return Promise.resolve();a.updateStatus(\"disconnecting\");var t=h(function(){var e;return Promise.resolve(null==(e=a.wakeLock)?void 0:e.release()).then(function(){a.wakeLock=null})},function(){});return Promise.resolve(t&&t.then?t.then(n):n())}catch(e){return Promise.reject(e)}},this.updateMode=function(e){e!==u.mode&&(u.mode=e,u.options.onModeChange({mode:e}))},this.updateStatus=function(e){e!==u.status&&(u.status=e,u.options.onStatusChange({status:e}))},this.updateCanSendFeedback=function(){var e=u.currentEventId!==u.lastFeedbackEventId;u.canSendFeedback!==e&&(u.canSendFeedback=e,u.options.onCanSendFeedbackChange({canSendFeedback:e}))},this.onMessage=function(e){try{switch(e.type){case\"interruption\":return e.interruption_event&&(s.lastInterruptTimestamp=e.interruption_event.event_id),s.fadeOutAudio(),Promise.resolve();case\"agent_response\":return s.options.onMessage({source:\"ai\",message:e.agent_response_event.agent_response}),Promise.resolve();case\"user_transcript\":return s.options.onMessage({source:\"user\",message:e.user_transcription_event.user_transcript}),Promise.resolve();case\"internal_tentative_agent_response\":return s.options.onDebug({type:\"tentative_agent_response\",response:e.tentative_agent_response_internal_event.tentative_agent_response}),Promise.resolve();case\"client_tool_call\":return Promise.resolve(function(){if(s.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name)){var n=h(function(){return Promise.resolve(s.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters)).then(function(n){var t=\"object\"==typeof n?JSON.stringify(n):String(n);s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:t,is_error:!1})})},function(n){s.onError(\"Client tool execution failed with following error: \"+(null==n?void 0:n.message),{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool execution failed: \"+(null==n?void 0:n.message),is_error:!0})});if(n&&n.then)return n.then(function(){})}else{if(s.options.onUnhandledClientToolCall)return void s.options.onUnhandledClientToolCall(e.client_tool_call);s.onError(\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",{clientToolName:e.client_tool_call.tool_name}),s.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool with name \"+e.client_tool_call.tool_name+\" is not defined on client\",is_error:!0})}}());case\"audio\":return s.lastInterruptTimestamp<=e.audio_event.event_id&&(s.options.onAudio(e.audio_event.audio_base_64),s.addAudioBase64Chunk(e.audio_event.audio_base_64),s.currentEventId=e.audio_event.event_id,s.updateCanSendFeedback(),s.updateMode(\"speaking\")),Promise.resolve();case\"ping\":return s.connection.sendMessage({type:\"pong\",event_id:e.ping_event.event_id}),Promise.resolve();default:return s.options.onDebug(e),Promise.resolve()}}catch(e){return Promise.reject(e)}},this.onInputWorkletMessage=function(e){var n,t;\"connected\"===u.status&&u.connection.sendMessage({user_audio_chunk:(n=e.data[0].buffer,t=new Uint8Array(n),window.btoa(String.fromCharCode.apply(String,t)))})},this.onOutputWorkletMessage=function(e){var n=e.data;\"process\"===n.type&&u.updateMode(n.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=function(e){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"}),u.output.worklet.port.postMessage({type:\"buffer\",buffer:n(e)})},this.fadeOutAudio=function(){u.updateMode(\"listening\"),u.output.worklet.port.postMessage({type:\"interrupt\"}),u.output.gain.gain.exponentialRampToValueAtTime(1e-4,u.output.context.currentTime+2),setTimeout(function(){u.output.gain.gain.value=u.volume,u.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.onError=function(e,n){console.error(e,n),u.options.onError(e,n)},this.calculateVolume=function(e){if(0===e.length)return 0;for(var n=0,t=0;t<e.length;t++)n+=e[t]/255;return(n/=e.length)<0?0:n>1?1:n},this.getId=function(){return u.connection.conversationId},this.isOpen=function(){return\"connected\"===u.status},this.setVolume=function(e){u.volume=e.volume},this.setMicMuted=function(e){u.input.setMuted(e)},this.getInputByteFrequencyData=function(){return null!=u.inputFrequencyData||(u.inputFrequencyData=new Uint8Array(u.input.analyser.frequencyBinCount)),u.input.analyser.getByteFrequencyData(u.inputFrequencyData),u.inputFrequencyData},this.getOutputByteFrequencyData=function(){return null!=u.outputFrequencyData||(u.outputFrequencyData=new Uint8Array(u.output.analyser.frequencyBinCount)),u.output.analyser.getByteFrequencyData(u.outputFrequencyData),u.outputFrequencyData},this.getInputVolume=function(){return u.calculateVolume(u.getInputByteFrequencyData())},this.getOutputVolume=function(){return u.calculateVolume(u.getOutputByteFrequencyData())},this.sendFeedback=function(e){u.canSendFeedback?(u.connection.sendMessage({type:\"feedback\",score:e?\"like\":\"dislike\",event_id:u.currentEventId}),u.lastFeedbackEventId=u.currentEventId,u.updateCanSendFeedback()):console.warn(0===u.lastFeedbackEventId?\"Cannot send feedback: the conversation has not started yet.\":\"Cannot send feedback: feedback has already been sent for the current response.\")},this.sendContextualUpdate=function(e){u.connection.sendMessage({type:\"contextual_update\",text:e})},this.options=e,this.connection=t,this.input=o,this.output=r,this.wakeLock=i,this.options.onConnect({conversationId:t.conversationId}),this.connection.onDisconnect(this.endSessionWithDetails),this.connection.onMessage(this.onMessage),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}return t.startSession=function(n){try{var o=function(){return h(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:!0})).then(function(o){var h;function p(){return Promise.resolve(l.create(n)).then(function(o){return c=o,Promise.resolve(Promise.all([i.create(e({},c.inputFormat,{preferHeadphonesForIosDevices:n.preferHeadphonesForIosDevices})),u.create(c.outputFormat)])).then(function(e){var n;return s=e[0],d=e[1],null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),m=null,new t(a,c,s,d,v)})})}m=o;var f,g=null!=(h=n.connectionDelay)?h:{default:0,android:3e3},y=g.default;if(/android/i.test(navigator.userAgent))y=null!=(f=g.android)?f:y;else if(r()){var _;y=null!=(_=g.ios)?_:y}var b=function(){if(y>0)return Promise.resolve(new Promise(function(e){return setTimeout(e,y)})).then(function(){})}();return b&&b.then?b.then(p):p()})},function(e){var n,t,o;return a.onStatusChange({status:\"disconnected\"}),null==(n=m)||n.getTracks().forEach(function(e){return e.stop()}),null==(t=c)||t.close(),Promise.resolve(null==(o=s)?void 0:o.close()).then(function(){var n;return Promise.resolve(null==(n=d)?void 0:n.close()).then(function(){function n(){throw e}var t=h(function(){var e;return Promise.resolve(null==(e=v)?void 0:e.release()).then(function(){v=null})},function(){});return t&&t.then?t.then(n):n()})})})},a=e({},p,f,n);a.onStatusChange({status:\"connecting\"}),a.onCanSendFeedbackChange({canSendFeedback:!1});var s=null,c=null,d=null,m=null,v=null,g=function(e){if(null==(e=n.useWakeLock)||e){var t=h(function(){return Promise.resolve(navigator.wakeLock.request(\"screen\")).then(function(e){v=e})},function(){});if(t&&t.then)return t.then(function(){})}}();return Promise.resolve(g&&g.then?g.then(o):o())}catch(e){return Promise.reject(e)}},t}();function v(e,n,t){return void 0===t&&(t=\"https://api.elevenlabs.io\"),fetch(t+\"/v1/convai/conversations/\"+e+\"/feedback\",{method:\"POST\",body:JSON.stringify({feedback:n?\"like\":\"dislike\"}),headers:{\"Content-Type\":\"application/json\"}})}export{m as Conversation,v as postOverallFeedback};\n//# sourceMappingURL=lib.module.js.map\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output, wakeLock);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult =\n              typeof result === \"object\"\n                ? JSON.stringify(result)\n                : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            return;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64);\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n\n  public sendContextualUpdate = (text: string) => {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n","// Visualization module: canvas-based idle circle and reactive line driven by audio\nimport { createVisualizer } from './visualizers/registry.js';\n\nlet audioCtx = null;\nlet analyser = null;\nlet dataArray = null;\nlet rafId = null;\nlet canvas = null;\nlet ctx = null;\nlet vizState = 'idle'; // 'idle' | 'active' (state of the visualization)\nlet silentGainNode = null;\nconst mediaSourceMap = new WeakMap(); // HTMLMediaElement -> MediaElementAudioSourceNode\nconst streamSourceMap = new WeakMap(); // MediaStream -> MediaStreamAudioSourceNode\nconst playingEls = new Set();\nlet activeConversation = null;\nlet lastSdkBins = null;\n\n// Visualizer instance (pluggable)\nlet visualizerInstance = null;\nlet visualizerConfig = { mode: 'line', color: '#00ff80' };\nlet containerElement = null;\n\n// Debug helpers\nlet lastActive = false;\nlet silentFrames = 0;\nconst ACTIVE_THRESHOLD = 0.015; // RMS threshold\nconst SILENT_FRAME_LIMIT = 20; // ~0.33s at 60fps\n\nconst ensureAudioContext = async () => {\n  if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  if (audioCtx.state === 'suspended') {\n    try { await audioCtx.resume(); } catch {}\n  }\n};\n\nexport const updateVisualizerMode = (mode) => {\n    if (mode !== vizState) {\n        console.log('[viz] state ->', mode);\n        vizState = mode;\n    }\n};\n\nexport const configureVisualizer = (config, container = null) => {\n  if (config) {\n    visualizerConfig = { ...visualizerConfig, ...config };\n    console.log('[viz] config updated:', visualizerConfig);\n    // Recreate visualizer instance with new config\n    visualizerInstance = createVisualizer(visualizerConfig.mode || 'line', visualizerConfig);\n    \n    // Store container reference\n    if (container) {\n      containerElement = container;\n    }\n    \n    // Call setup method if visualizer has one\n    if (visualizerInstance && typeof visualizerInstance.setup === 'function' && containerElement) {\n      visualizerInstance.setup(containerElement);\n    }\n  }\n};\n\nconst buildAnalyserChain = (sourceNode) => {\n  analyser = (audioCtx && audioCtx.createAnalyser) ? audioCtx.createAnalyser() : null;\n  if (!analyser) return;\n  analyser.fftSize = 2048;\n  dataArray = new Uint8Array(analyser.frequencyBinCount);\n  try { sourceNode.disconnect(); } catch {}\n  sourceNode.connect(analyser);\n  // Keep graph alive but silent\n  if (!silentGainNode) {\n    silentGainNode = audioCtx.createGain();\n    silentGainNode.gain.value = 0.0;\n    silentGainNode.connect(audioCtx.destination);\n  }\n  try { analyser.disconnect(); } catch {}\n  analyser.connect(silentGainNode);\n};\n\nexport const connectMediaEl = async (el) => {\n  if (!(el instanceof HTMLMediaElement)) return;\n  await ensureAudioContext();\n  let source = mediaSourceMap.get(el);\n  if (!source) {\n    try { source = audioCtx.createMediaElementSource(el); } catch (e) { console.warn('[viz] createMediaElementSource failed', e); }\n    if (source) mediaSourceMap.set(el, source);\n  }\n  if (source) buildAnalyserChain(source);\n  try { el.crossOrigin = 'anonymous'; } catch {}\n  console.log('[viz] MediaElement connected', { src: el.currentSrc || el.src });\n  \n  // Track play/pause events to control visualization\n  el.addEventListener('play', () => {\n    playingEls.add(el);\n    updateVisualizerMode('active');\n    console.log('[viz] element play');\n  });\n  const onStop = () => {\n    playingEls.delete(el);\n    if (playingEls.size === 0) updateVisualizerMode('idle');\n    console.log('[viz] element stop/pause, playing count:', playingEls.size);\n  };\n  el.addEventListener('pause', onStop);\n  el.addEventListener('ended', onStop);\n};\n\nexport const connectMediaStream = async (stream) => {\n  if (!(stream instanceof MediaStream)) return;\n  await ensureAudioContext();\n  let source = streamSourceMap.get(stream);\n  if (!source) {\n    try { source = audioCtx.createMediaStreamSource(stream); } catch (e) { console.warn('[viz] createMediaStreamSource failed', e); }\n    if (source) streamSourceMap.set(stream, source);\n  }\n  if (source) buildAnalyserChain(source);\n  updateVisualizerMode('active');\n  console.log('[viz] MediaStream connected with tracks:', stream.getTracks().map(t => t.kind + ':' + t.readyState));\n  stream.getTracks().forEach(t => t.addEventListener('ended', () => {\n    if (stream.getTracks().every(tr => tr.readyState === 'ended')) {\n      updateVisualizerMode('idle');\n      console.log('[viz] stream ended');\n    }\n  }));\n};\n\nexport const observeMediaPlayback = () => {\n  const handler = async (type, target) => {\n    if (!(target instanceof HTMLMediaElement)) return;\n    if (type === 'play') {\n      await connectMediaEl(target);\n      playingEls.add(target);\n      updateVisualizerMode('active');\n      console.log('[viz] global play', target.tagName);\n    } else {\n      playingEls.delete(target);\n      if (playingEls.size === 0) updateVisualizerMode('idle');\n      console.log('[viz] global', type, 'playing count:', playingEls.size);\n    }\n  };\n  document.addEventListener('play', (e) => handler('play', e.target), true);\n  document.addEventListener('pause', (e) => handler('pause', e.target), true);\n  document.addEventListener('ended', (e) => handler('ended', e.target), true);\n};\n\nexport const hookConversationAudio = async (conv) => {\n  try {\n    if (!conv) return;\n    // Try element\n    const el = conv.audioElement || conv.audioEl || conv.audio;\n    if (el instanceof HTMLMediaElement) {\n      await connectMediaEl(el);\n      return;\n    }\n    // Try stream\n    const stream = conv.mediaStream || conv.outputStream || conv.remoteStream || conv.stream;\n    if (stream instanceof MediaStream) {\n      await connectMediaStream(stream);\n      return;\n    }\n    // Fallback: observe DOM for media created later\n    const mo = new MutationObserver((muts) => {\n      muts.forEach((mut) => {\n        mut.addedNodes?.forEach((n) => {\n          if (n instanceof HTMLMediaElement) connectMediaEl(n);\n          if (n.querySelectorAll) n.querySelectorAll('audio,video').forEach(connectMediaEl);\n        });\n      });\n    });\n    mo.observe(document.documentElement, { childList: true, subtree: true });\n  } catch (e) {\n    console.warn('[viz] hookConversationAudio failed', e);\n  }\n};\n\nexport const setActiveConversation = (conv) => {\n  activeConversation = conv;\n};\n\nconst initCanvas = (canvasId) => {\n  canvas = document.getElementById(canvasId);\n  if (!canvas) return;\n  ctx = canvas.getContext('2d');\n  const resize = () => {\n    const dpr = window.devicePixelRatio || 1;\n    const w = canvas.clientWidth || window.innerWidth;\n    const h = canvas.clientHeight || window.innerHeight;\n    canvas.width = Math.floor(w * dpr);\n    canvas.height = Math.floor(h * dpr);\n    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n  };\n  resize();\n  window.addEventListener('resize', resize);\n};\n\nconst drawIdle = (tSec) => {\n  if (!visualizerInstance) return;\n  visualizerInstance.drawIdle(ctx, canvas, tSec);\n};\n\nconst drawActive = () => {\n  if (!visualizerInstance) return;\n  \n  const result = visualizerInstance.draw(ctx, canvas, analyser, dataArray, activeConversation, lastSdkBins);\n  const rms = result?.rms || 0;\n\n  // Debug: log when audio starts/stops\n  const isActive = rms > ACTIVE_THRESHOLD;\n  if (isActive && !lastActive) {\n    console.log('[viz] audio signal detected, rms=', rms.toFixed(3));\n  }\n  if (!isActive) {\n    silentFrames++;\n    if (lastActive && silentFrames > SILENT_FRAME_LIMIT) {\n      console.log('[viz] audio gone silent');\n    }\n  } else {\n    silentFrames = 0;\n  }\n  lastActive = isActive;\n};\n\nexport const initFullVisualizer = (canvasId = 'vizCanvas', config = null, container = null) => {\n  // Store container reference\n  if (container) {\n    containerElement = container;\n  }\n  \n  if (config) {\n    configureVisualizer(config, containerElement);\n  } else if (!visualizerInstance) {\n    // Initialize with default config\n    visualizerInstance = createVisualizer(visualizerConfig.mode, visualizerConfig);\n    // Call setup if we have a container\n    if (visualizerInstance && typeof visualizerInstance.setup === 'function' && containerElement) {\n      visualizerInstance.setup(containerElement);\n    }\n  }\n  \n  initCanvas(canvasId);\n  cancelAnimationFrame(rafId);\n  const tick = (tMs) => {\n    const tSec = tMs / 1000;\n    // Use vizState to determine if active or idle, not visualizer mode\n    if (vizState === 'active' || vizState === 'line') {\n      drawActive();\n    } else {\n      drawIdle(tSec);\n    }\n    rafId = requestAnimationFrame(tick);\n  };\n  rafId = requestAnimationFrame(tick);\n};\n","// Visualization modes registry\nimport { LineVisualizer } from './lineVisualizer.js';\nimport { ImageVisualizer } from './imageVisualizer.js';\n\nconst visualizerRegistry = {\n  line: LineVisualizer,\n  image: ImageVisualizer,\n  // Add more visualizer modes here in the future\n  // bars: BarsVisualizer,\n  // circle: CircleVisualizer,\n  // etc.\n};\n\nexport function createVisualizer(mode, config) {\n  const VisualizerClass = visualizerRegistry[mode];\n  if (!VisualizerClass) {\n    console.warn(`[viz] Unknown visualizer mode: ${mode}, falling back to 'line'`);\n    return new LineVisualizer(config);\n  }\n  return new VisualizerClass(config);\n}\n\nexport function registerVisualizer(mode, VisualizerClass) {\n  visualizerRegistry[mode] = VisualizerClass;\n}\n","// Line visualization mode\nexport class LineVisualizer {\n  constructor(config = {}) {\n    this.color = config.color || '#00ff80';\n    this.shadowBlur = config.shadowBlur || 16;\n    this.lineWidth = config.lineWidth || 3;\n    this.backgroundImage = config.backgroundImage || null;\n  }\n\n  setup(containerElement) {\n    // Setup background image for line visualizer\n    if (containerElement && this.backgroundImage) {\n      containerElement.style.setProperty('--bg-image', `url('${this.backgroundImage}')`);\n      containerElement.classList.add('has-bg');\n      console.log('[LineVisualizer] Background image configured:', this.backgroundImage);\n    }\n  }\n\n  draw(ctx, canvas, analyser, dataArray, activeConversation, lastSdkBins) {\n    if (!ctx || !canvas) return;\n    \n    const w = canvas.clientWidth;\n    const h = canvas.clientHeight;\n    ctx.clearRect(0, 0, w, h);\n    ctx.beginPath();\n    ctx.lineWidth = this.lineWidth;\n    ctx.strokeStyle = this.color;\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = this.shadowBlur;\n    const midY = Math.floor(h / 2);\n\n    let rms = 0;\n    if (analyser && dataArray) {\n      analyser.getByteTimeDomainData(dataArray);\n      // Remove DC offset to keep center exactly at midY\n      let mean = 0;\n      for (let i = 0; i < dataArray.length; i++) mean += dataArray[i];\n      mean /= dataArray.length; // around 128, but measured live\n      const step = w / dataArray.length;\n      let sum = 0;\n      for (let i = 0; i < dataArray.length; i++) {\n        const centered = (dataArray[i] - mean) / 128; // now ~-1..1 around 0\n        const x = i * step;\n        const y = midY + centered * (h * 0.22);\n        if (i === 0) ctx.moveTo(x, y); else ctx.lineTo(x, y);\n        sum += centered * centered;\n      }\n      rms = Math.sqrt(sum / dataArray.length);\n    } else if (activeConversation?.getOutputByteFrequencyData) {\n      try {\n        const res = activeConversation.getOutputByteFrequencyData();\n        if (res && typeof res.then === 'function') {\n          res.then((bins) => { lastSdkBins = bins; }).catch(() => {});\n        } else if (res instanceof Uint8Array) {\n          lastSdkBins = res;\n        }\n      } catch {}\n\n      const bins = lastSdkBins;\n      const len = bins?.length || 0;\n      if (len > 0) {\n        // Center bins by subtracting their average so graph oscillates equally\n        let avg = 0;\n        for (let i = 0; i < len; i++) avg += bins[i];\n        avg /= len || 1;\n        const step = w / len;\n        let sum = 0;\n        for (let i = 0; i < len; i++) {\n          const centered = (bins[i] - avg) / 255; // roughly -0.5..0.5\n          const x = i * step;\n          const y = midY + centered * 2 * (h * 0.22); // scale to ~-1..1\n          if (i === 0) ctx.moveTo(x, y); else ctx.lineTo(x, y);\n          sum += centered * centered;\n        }\n        rms = Math.sqrt(sum / len) / 1.1; // rough normalization\n      }\n    }\n\n    ctx.stroke();\n    return { rms };\n  }\n\n  drawIdle(ctx, canvas, tSec) {\n    if (!ctx || !canvas) return;\n    const w = canvas.clientWidth;\n    const h = canvas.clientHeight;\n    ctx.clearRect(0, 0, w, h);\n    const cx = w / 2;\n    const cy = h / 2;\n    const base = Math.min(w, h) * 0.12;\n    const r = base * (1 + 0.06 * Math.sin(tSec * 2 * Math.PI * 0.9));\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 20;\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.lineWidth;\n    ctx.beginPath();\n    ctx.arc(cx, cy, r, 0, Math.PI * 2);\n    ctx.stroke();\n  }\n}\n","// Image visualization mode\nexport class ImageVisualizer {\n  constructor(config = {}) {\n    console.log('[ImageVisualizer] Constructor called with config:', config);\n    this.mode = 'image';\n    this.interval = config.interval || 200; // ms between frames\n    this.talkImages = config.talk_images || [];\n    this.idleImages = config.idle_images || [];\n    this.backgroundColor = config.backgroundColor || '#000000';\n    \n    console.log('[ImageVisualizer] Talk images:', this.talkImages);\n    console.log('[ImageVisualizer] Idle images:', this.idleImages);\n    \n    // Preloaded images\n    this.talkImageElements = [];\n    this.idleImageElements = [];\n    this.imagesLoaded = false;\n    this.loadingPromise = null;\n    \n    // Animation state\n    this.currentTalkFrame = 0;\n    this.lastFrameTime = 0;\n    this.currentIdleImage = null;\n    \n    // Start preloading images\n    this.preloadImages();\n  }\n\n  setup(containerElement) {\n    // Setup background color for image visualizer\n    if (containerElement) {\n      containerElement.style.backgroundColor = this.backgroundColor;\n      console.log('[ImageVisualizer] Background color configured:', this.backgroundColor);\n      \n      // If there's a background image class, remove it for image mode\n      containerElement.classList.remove('has-bg');\n      containerElement.style.removeProperty('--bg-image');\n    }\n  }\n\n  async preloadImages() {\n    if (this.loadingPromise) return this.loadingPromise;\n    \n    this.loadingPromise = new Promise(async (resolve) => {\n      const loadImage = (src) => {\n        return new Promise((resolveImg, rejectImg) => {\n          const img = new Image();\n          img.onload = () => resolveImg(img);\n          img.onerror = () => {\n            console.warn(`[ImageVisualizer] Failed to load image: ${src}`);\n            rejectImg(new Error(`Failed to load ${src}`));\n          };\n          img.src = src;\n        });\n      };\n\n      try {\n        // Load all talk images\n        console.log('[ImageVisualizer] Preloading talk images:', this.talkImages);\n        const talkPromises = this.talkImages.map(src => loadImage(src).catch(() => null));\n        this.talkImageElements = (await Promise.all(talkPromises)).filter(img => img !== null);\n        \n        // Load all idle images\n        console.log('[ImageVisualizer] Preloading idle images:', this.idleImages);\n        const idlePromises = this.idleImages.map(src => loadImage(src).catch(() => null));\n        this.idleImageElements = (await Promise.all(idlePromises)).filter(img => img !== null);\n        \n        this.imagesLoaded = true;\n        console.log('[ImageVisualizer] All images preloaded successfully');\n        console.log(`  - Talk images: ${this.talkImageElements.length}`);\n        console.log(`  - Idle images: ${this.idleImageElements.length}`);\n        \n        // Pick random idle image\n        if (this.idleImageElements.length > 0) {\n          this.currentIdleImage = this.idleImageElements[\n            Math.floor(Math.random() * this.idleImageElements.length)\n          ];\n        }\n        \n        resolve();\n      } catch (error) {\n        console.error('[ImageVisualizer] Error preloading images:', error);\n        this.imagesLoaded = true; // Mark as loaded anyway to avoid blocking\n        resolve();\n      }\n    });\n    \n    return this.loadingPromise;\n  }\n\n  drawImage(ctx, canvas, img) {\n    if (!ctx || !canvas || !img) return;\n    \n    const w = canvas.clientWidth;\n    const h = canvas.clientHeight;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, w, h);\n    \n    // Calculate scaling to fit image while maintaining aspect ratio\n    const imgAspect = img.width / img.height;\n    const canvasAspect = w / h;\n    \n    let drawWidth, drawHeight, drawX, drawY;\n    \n    if (imgAspect > canvasAspect) {\n      // Image is wider than canvas\n      drawWidth = w;\n      drawHeight = w / imgAspect;\n      drawX = 0;\n      drawY = (h - drawHeight) / 2;\n    } else {\n      // Image is taller than canvas\n      drawHeight = h;\n      drawWidth = h * imgAspect;\n      drawX = (w - drawWidth) / 2;\n      drawY = 0;\n    }\n    \n    // Draw image centered and scaled\n    ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);\n  }\n\n  draw(ctx, canvas, analyser, dataArray, activeConversation, lastSdkBins) {\n    if (!this.imagesLoaded || this.talkImageElements.length === 0) {\n      // Fallback: draw placeholder\n      this.drawPlaceholder(ctx, canvas, 'Loading...', '#00ff80');\n      return { rms: 0 };\n    }\n    \n    const now = performance.now();\n    \n    // Check if it's time to advance frame\n    if (now - this.lastFrameTime >= this.interval) {\n      this.currentTalkFrame = (this.currentTalkFrame + 1) % this.talkImageElements.length;\n      this.lastFrameTime = now;\n    }\n    \n    const currentImage = this.talkImageElements[this.currentTalkFrame];\n    this.drawImage(ctx, canvas, currentImage);\n    \n    // Calculate RMS for activity detection (simplified for image mode)\n    let rms = 0.5; // Always consider \"active\" when speaking\n    \n    return { rms };\n  }\n\n  drawIdle(ctx, canvas, tSec) {\n    if (!this.imagesLoaded) {\n      // Fallback: draw placeholder\n      this.drawPlaceholder(ctx, canvas, 'Loading...', '#00ff80');\n      return;\n    }\n    \n    if (this.idleImageElements.length === 0) {\n      // No idle images, draw placeholder\n      this.drawPlaceholder(ctx, canvas, 'Idle', '#00ff80');\n      return;\n    }\n    \n    // Draw current idle image\n    if (this.currentIdleImage) {\n      this.drawImage(ctx, canvas, this.currentIdleImage);\n    }\n    \n    // Optionally, change idle image every N seconds\n    // For now, we keep the same random idle image\n  }\n\n  drawPlaceholder(ctx, canvas, text, color) {\n    if (!ctx || !canvas) return;\n    \n    const w = canvas.clientWidth;\n    const h = canvas.clientHeight;\n    \n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = color;\n    ctx.font = '24px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(text, w / 2, h / 2);\n  }\n\n  // Method to change idle image (can be called externally or on timer)\n  changeIdleImage() {\n    if (this.idleImageElements.length > 0) {\n      this.currentIdleImage = this.idleImageElements[\n        Math.floor(Math.random() * this.idleImageElements.length)\n      ];\n    }\n  }\n\n  // Reset talk animation to first frame\n  resetTalkAnimation() {\n    this.currentTalkFrame = 0;\n    this.lastFrameTime = performance.now();\n  }\n}\n"],"names":["$ee5c819c8591c8f0$var$e","Object","assign","bind","e","n","arguments","length","t","o","hasOwnProperty","call","apply","$ee5c819c8591c8f0$var$t","Blob","type","$ee5c819c8591c8f0$var$o","URL","createObjectURL","$ee5c819c8591c8f0$var$r","includes","navigator","platform","userAgent","document","$ee5c819c8591c8f0$var$i","context","analyser","worklet","inputStream","create","sampleRate","i","format","a","preferHeadphonesForIosDevices","s","u","Promise","resolve","c","l","audioWorklet","addModule","then","mediaDevices","getUserMedia","audio","createMediaStreamSource","r","AudioWorkletNode","port","postMessage","connect","resume","getSupportedConstraints","window","AudioContext","createAnalyser","ideal","echoCancellation","noiseSuppression","enumerateDevices","find","kind","label","toLowerCase","deviceId","getTracks","forEach","stop","close","reject","prototype","setMuted","isMuted","$ee5c819c8591c8f0$var$a","$ee5c819c8591c8f0$var$s","$ee5c819c8591c8f0$var$u","gain","createGain","destination","$ee5c819c8591c8f0$var$l","socket","conversationId","inputFormat","outputFormat","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","JSON","parse","data","push","origin","signedUrl","agentId","authorization","WebSocket","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","$ee5c819c8591c8f0$var$c","conversation_initiation_metadata_event","console","warn","conversation_id","agent_output_audio_format","user_input_audio_format","$ee5c819c8591c8f0$var$d","sendMessage","onMessage","onDisconnect","split","Error","parseInt","isNaN","$ee5c819c8591c8f0$var$h","$ee5c819c8591c8f0$var$p","clientTools","$ee5c819c8591c8f0$var$f","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","$ee5c819c8591c8f0$export$8e86b22308382a1","options","connection","input","output","wakeLock","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","release","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","source","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","client_tool_call","tool_name","parameters","String","tool_call_id","result","is_error","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","user_audio_chunk","Uint8Array","buffer","btoa","fromCharCode","onOutputWorkletMessage","finished","value","$ee5c819c8591c8f0$var$n","atob","charCodeAt","exponentialRampToValueAtTime","currentTime","error","calculateVolume","getId","isOpen","setVolume","setMicMuted","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","score","sendContextualUpdate","text","onmessage","startSession","p","all","d","m","v","_","h","f","g","connectionDelay","default","android","y","test","ios","b","useWakeLock","request","$ab6263d00374df5c$export$5cfa08cdc2103d04","constructor","config","color","shadowBlur","lineWidth","backgroundImage","setup","containerElement","style","setProperty","classList","add","log","draw","ctx","canvas","dataArray","activeConversation","lastSdkBins","w","clientWidth","clientHeight","clearRect","beginPath","strokeStyle","shadowColor","midY","Math","floor","rms","getByteTimeDomainData","mean","step","sum","centered","x","moveTo","lineTo","sqrt","res","bins","catch","len","avg","stroke","drawIdle","tSec","base","min","sin","PI","arc","$ae14566df0fa5b9a$var$visualizerRegistry","line","image","interval","talkImages","talk_images","idleImages","idle_images","backgroundColor","talkImageElements","idleImageElements","imagesLoaded","loadingPromise","currentTalkFrame","lastFrameTime","currentIdleImage","preloadImages","remove","removeProperty","loadImage","src","resolveImg","rejectImg","img","Image","onload","onerror","talkPromises","map","filter","idlePromises","random","drawImage","drawWidth","drawHeight","drawX","drawY","imgAspect","width","height","drawPlaceholder","now","performance","currentImage","fillStyle","font","textAlign","textBaseline","fillText","changeIdleImage","resetTalkAnimation","$ae14566df0fa5b9a$export$dffed1d1b59b285","VisualizerClass","$812c95b36586ff42$var$audioCtx","$812c95b36586ff42$var$analyser","$812c95b36586ff42$var$dataArray","$812c95b36586ff42$var$rafId","$812c95b36586ff42$var$canvas","$812c95b36586ff42$var$ctx","$812c95b36586ff42$var$vizState","$812c95b36586ff42$var$silentGainNode","$812c95b36586ff42$var$mediaSourceMap","WeakMap","$812c95b36586ff42$var$streamSourceMap","$812c95b36586ff42$var$playingEls","Set","$812c95b36586ff42$var$activeConversation","$812c95b36586ff42$var$visualizerInstance","$812c95b36586ff42$var$visualizerConfig","$812c95b36586ff42$var$containerElement","$812c95b36586ff42$var$lastActive","$812c95b36586ff42$var$silentFrames","$812c95b36586ff42$var$ensureAudioContext","webkitAudioContext","state","$812c95b36586ff42$export$7df4508c5acf21ae","$812c95b36586ff42$export$4e772aeb208637a","container","$812c95b36586ff42$var$buildAnalyserChain","sourceNode","fftSize","$812c95b36586ff42$export$f3feba0435d608ff","el","HTMLMediaElement","get","createMediaElementSource","set","crossOrigin","currentSrc","onStop","delete","size","$812c95b36586ff42$export$b62ab7b01fb852c0","stream","MediaStream","readyState","every","tr","$812c95b36586ff42$export$1fce99c0adc6f9c","handler","target","tagName","$812c95b36586ff42$export$49b7f52cc38c934a","conv","audioElement","audioEl","mediaStream","outputStream","remoteStream","mo","MutationObserver","muts","mut","addedNodes","querySelectorAll","observe","documentElement","childList","subtree","$812c95b36586ff42$export$84cc0adba6eaa4c6","$812c95b36586ff42$var$initCanvas","canvasId","getElementById","getContext","resize","dpr","devicePixelRatio","innerWidth","innerHeight","setTransform","$812c95b36586ff42$var$drawIdle","$812c95b36586ff42$var$drawActive","isActive","toFixed","$812c95b36586ff42$export$d379ea01857aee09","cancelAnimationFrame","tick","tMs","requestAnimationFrame","$dad545c909cfec2d$var$startBtn","$dad545c909cfec2d$var$stopBtn","$dad545c909cfec2d$var$statusEl","$dad545c909cfec2d$var$conversationInstance","$dad545c909cfec2d$var$audio","$dad545c909cfec2d$var$urlParams","URLSearchParams","location","search","$dad545c909cfec2d$var$config","name","fullscreen","$dad545c909cfec2d$var$initializeFullscreenMode","cardEl","fullModeEl","vizConfig","visualizer","$dad545c909cfec2d$var$endConversation","$dad545c909cfec2d$var$startConversation","$dad545c909cfec2d$var$loadConfig","fetch","ok","statusText","json","textContent","startBtn","disabled","innerText","$dad545c909cfec2d$var$updateStatus","startAudio","Audio","play","onended","pause","base64ToArrayBuffer","base64","binaryString","bytes","blob","rawAudioProcessor","isIosDevice","Input","this","_ref","_temp4","_temp2","_navigator$mediaDevic","supportsSampleRateConstraint","_temp","_temp3","availableDevices","idealDevice","keyword","_catch","_inputStream","_context","track","_proto","audioConcatProcessor","Output","isValidSocketEvent","event","Connection","_this","parsedEvent","_config$origin","url","protocols","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","conversationConfig","parseFormat","_socket2","callback","details","_this$onDisconnectCal","_format$split","formatPart","sampleRatePart","defaultClientTools","defaultCallbacks","Conversation","_this2","_this3","_this2$wakeLock","formattedResult","chunk","frequencyData","_ref2","_this$outputFrequency","like","_temp10","_options$connectionDe","_temp6","_Connection$create","_extends","_Promise$all","_preliminaryInputStre","preliminaryInputStream","fullOptions","_delayConfig$android","delayConfig","delay","_delayConfig$ios","_temp5","_preliminaryInputStre2","_connection","_input","_output","_temp8","_temp7","_wakeLock","_temp9","_options$useWakeLock","_navigator$wakeLock$r","postOverallFeedback","method","body","feedback","headers"],"version":3,"file":"arapy-11labs.efa7e19f.js.map"}